
StoppuhrReloaded.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000da4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d30  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  00000da4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e55  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c84  00000000  00000000  00001c89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000515  00000000  00000000  0000290d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00002e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ca  00000000  00000000  00002ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000153  00000000  00000000  00003496  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	bc c0       	rjmp	.+376    	; 0x17a <__ctors_end>
   2:	00 00       	nop
   4:	cc c0       	rjmp	.+408    	; 0x19e <__bad_interrupt>
   6:	00 00       	nop
   8:	ca c0       	rjmp	.+404    	; 0x19e <__bad_interrupt>
   a:	00 00       	nop
   c:	c8 c0       	rjmp	.+400    	; 0x19e <__bad_interrupt>
   e:	00 00       	nop
  10:	c6 c0       	rjmp	.+396    	; 0x19e <__bad_interrupt>
  12:	00 00       	nop
  14:	c4 c0       	rjmp	.+392    	; 0x19e <__bad_interrupt>
  16:	00 00       	nop
  18:	c2 c0       	rjmp	.+388    	; 0x19e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c0 c0       	rjmp	.+384    	; 0x19e <__bad_interrupt>
  1e:	00 00       	nop
  20:	be c0       	rjmp	.+380    	; 0x19e <__bad_interrupt>
  22:	00 00       	nop
  24:	bc c0       	rjmp	.+376    	; 0x19e <__bad_interrupt>
  26:	00 00       	nop
  28:	ba c0       	rjmp	.+372    	; 0x19e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	b8 c0       	rjmp	.+368    	; 0x19e <__bad_interrupt>
  2e:	00 00       	nop
  30:	b6 c0       	rjmp	.+364    	; 0x19e <__bad_interrupt>
  32:	00 00       	nop
  34:	b4 c0       	rjmp	.+360    	; 0x19e <__bad_interrupt>
  36:	00 00       	nop
  38:	b2 c0       	rjmp	.+356    	; 0x19e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b0 c0       	rjmp	.+352    	; 0x19e <__bad_interrupt>
  3e:	00 00       	nop
  40:	ae c0       	rjmp	.+348    	; 0x19e <__bad_interrupt>
  42:	00 00       	nop
  44:	ac c0       	rjmp	.+344    	; 0x19e <__bad_interrupt>
  46:	00 00       	nop
  48:	aa c0       	rjmp	.+340    	; 0x19e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a8 c0       	rjmp	.+336    	; 0x19e <__bad_interrupt>
  4e:	00 00       	nop
  50:	a6 c0       	rjmp	.+332    	; 0x19e <__bad_interrupt>
  52:	00 00       	nop
  54:	a4 c0       	rjmp	.+328    	; 0x19e <__bad_interrupt>
  56:	00 00       	nop
  58:	a2 c0       	rjmp	.+324    	; 0x19e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a0 c0       	rjmp	.+320    	; 0x19e <__bad_interrupt>
  5e:	00 00       	nop
  60:	9e c0       	rjmp	.+316    	; 0x19e <__bad_interrupt>
  62:	00 00       	nop
  64:	9c c0       	rjmp	.+312    	; 0x19e <__bad_interrupt>
  66:	00 00       	nop
  68:	9a c0       	rjmp	.+308    	; 0x19e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	98 c0       	rjmp	.+304    	; 0x19e <__bad_interrupt>
  6e:	00 00       	nop
  70:	96 c0       	rjmp	.+300    	; 0x19e <__bad_interrupt>
  72:	00 00       	nop
  74:	94 c0       	rjmp	.+296    	; 0x19e <__bad_interrupt>
  76:	00 00       	nop
  78:	92 c0       	rjmp	.+292    	; 0x19e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	90 c0       	rjmp	.+288    	; 0x19e <__bad_interrupt>
  7e:	00 00       	nop
  80:	8e c0       	rjmp	.+284    	; 0x19e <__bad_interrupt>
  82:	00 00       	nop
  84:	8c c0       	rjmp	.+280    	; 0x19e <__bad_interrupt>
  86:	00 00       	nop
  88:	8a c0       	rjmp	.+276    	; 0x19e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	88 c0       	rjmp	.+272    	; 0x19e <__bad_interrupt>
  8e:	00 00       	nop
  90:	86 c0       	rjmp	.+268    	; 0x19e <__bad_interrupt>
  92:	00 00       	nop
  94:	84 c0       	rjmp	.+264    	; 0x19e <__bad_interrupt>
  96:	00 00       	nop
  98:	82 c0       	rjmp	.+260    	; 0x19e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	80 c0       	rjmp	.+256    	; 0x19e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	7e c0       	rjmp	.+252    	; 0x19e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	7c c0       	rjmp	.+248    	; 0x19e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	7a c0       	rjmp	.+244    	; 0x19e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	78 c0       	rjmp	.+240    	; 0x19e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	76 c0       	rjmp	.+236    	; 0x19e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	74 c0       	rjmp	.+232    	; 0x19e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	72 c0       	rjmp	.+228    	; 0x19e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	70 c0       	rjmp	.+224    	; 0x19e <__bad_interrupt>
  be:	00 00       	nop
  c0:	6e c0       	rjmp	.+220    	; 0x19e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	6c c0       	rjmp	.+216    	; 0x19e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	6a c0       	rjmp	.+212    	; 0x19e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	68 c0       	rjmp	.+208    	; 0x19e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	66 c0       	rjmp	.+204    	; 0x19e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	64 c0       	rjmp	.+200    	; 0x19e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	62 c0       	rjmp	.+196    	; 0x19e <__bad_interrupt>
  da:	00 00       	nop
  dc:	60 c0       	rjmp	.+192    	; 0x19e <__bad_interrupt>
  de:	00 00       	nop
  e0:	5e c0       	rjmp	.+188    	; 0x19e <__bad_interrupt>
  e2:	00 00       	nop
  e4:	c5 02       	muls	r28, r21
  e6:	c7 02       	muls	r28, r23
  e8:	c9 02       	muls	r28, r25
  ea:	cb 02       	muls	r28, r27
  ec:	cd 02       	muls	r28, r29
  ee:	cf 02       	muls	r28, r31
  f0:	d1 02       	muls	r29, r17
  f2:	d3 02       	muls	r29, r19
  f4:	d5 02       	muls	r29, r21
  f6:	d7 02       	muls	r29, r23
  f8:	07 63       	ori	r16, 0x37	; 55
  fa:	42 36       	cpi	r20, 0x62	; 98
  fc:	b7 9b       	sbis	0x16, 7	; 22
  fe:	d8 a7       	std	Y+40, r29	; 0x28
 100:	1a 39       	cpi	r17, 0x9A	; 154
 102:	68 56       	subi	r22, 0x68	; 104
 104:	18 ae       	std	Y+56, r1	; 0x38
 106:	ba ab       	std	Y+50, r27	; 0x32
 108:	55 8c       	ldd	r5, Z+29	; 0x1d
 10a:	1d 3c       	cpi	r17, 0xCD	; 205
 10c:	b7 cc       	rjmp	.-1682   	; 0xfffffa7c <__eeprom_end+0xff7efa7c>
 10e:	57 63       	ori	r21, 0x37	; 55
 110:	bd 6d       	ori	r27, 0xDD	; 221
 112:	ed fd       	.word	0xfded	; ????
 114:	75 3e       	cpi	r23, 0xE5	; 229
 116:	f6 17       	cp	r31, r22
 118:	72 31       	cpi	r23, 0x12	; 18
 11a:	bf 00       	.word	0x00bf	; ????
 11c:	00 00       	nop
 11e:	80 3f       	cpi	r24, 0xF0	; 240
 120:	08 00       	.word	0x0008	; ????
 122:	00 00       	nop
 124:	be 92       	st	-X, r11
 126:	24 49       	sbci	r18, 0x94	; 148
 128:	12 3e       	cpi	r17, 0xE2	; 226
 12a:	ab aa       	std	Y+51, r10	; 0x33
 12c:	aa 2a       	or	r10, r26
 12e:	be cd       	rjmp	.-1156   	; 0xfffffcac <__eeprom_end+0xff7efcac>
 130:	cc cc       	rjmp	.-1640   	; 0xfffffaca <__eeprom_end+0xff7efaca>
 132:	4c 3e       	cpi	r20, 0xEC	; 236
 134:	00 00       	nop
 136:	00 80       	ld	r0, Z
 138:	be ab       	std	Y+54, r27	; 0x36
 13a:	aa aa       	std	Y+50, r10	; 0x32
 13c:	aa 3e       	cpi	r26, 0xEA	; 234
 13e:	00 00       	nop
 140:	00 00       	nop
 142:	bf 00       	.word	0x00bf	; ????
 144:	00 00       	nop
 146:	80 3f       	cpi	r24, 0xF0	; 240
 148:	00 00       	nop
 14a:	00 00       	nop
 14c:	00 08       	sbc	r0, r0
 14e:	41 78       	andi	r20, 0x81	; 129
 150:	d3 bb       	out	0x13, r29	; 19
 152:	43 87       	std	Z+11, r20	; 0x0b
 154:	d1 13       	cpse	r29, r17
 156:	3d 19       	sub	r19, r13
 158:	0e 3c       	cpi	r16, 0xCE	; 206
 15a:	c3 bd       	out	0x23, r28	; 35
 15c:	42 82       	std	Z+2, r4	; 0x02
 15e:	ad 2b       	or	r26, r29
 160:	3e 68       	ori	r19, 0x8E	; 142
 162:	ec 82       	std	Y+4, r14	; 0x04
 164:	76 be       	out	0x36, r7	; 54
 166:	d9 8f       	std	Y+25, r29	; 0x19
 168:	e1 a9       	ldd	r30, Z+49	; 0x31
 16a:	3e 4c       	sbci	r19, 0xCE	; 206
 16c:	80 ef       	ldi	r24, 0xF0	; 240
 16e:	ff be       	out	0x3f, r15	; 63
 170:	01 c4       	rjmp	.+2050   	; 0x974 <__mulsf3_pse+0x96>
 172:	ff 7f       	andi	r31, 0xFF	; 255
 174:	3f 00       	.word	0x003f	; ????
 176:	00 00       	nop
	...

0000017a <__ctors_end>:
 17a:	11 24       	eor	r1, r1
 17c:	1f be       	out	0x3f, r1	; 63
 17e:	cf ef       	ldi	r28, 0xFF	; 255
 180:	d1 e2       	ldi	r29, 0x21	; 33
 182:	de bf       	out	0x3e, r29	; 62
 184:	cd bf       	out	0x3d, r28	; 61
 186:	00 e0       	ldi	r16, 0x00	; 0
 188:	0c bf       	out	0x3c, r16	; 60

0000018a <__do_clear_bss>:
 18a:	22 e0       	ldi	r18, 0x02	; 2
 18c:	a0 e0       	ldi	r26, 0x00	; 0
 18e:	b2 e0       	ldi	r27, 0x02	; 2
 190:	01 c0       	rjmp	.+2      	; 0x194 <.do_clear_bss_start>

00000192 <.do_clear_bss_loop>:
 192:	1d 92       	st	X+, r1

00000194 <.do_clear_bss_start>:
 194:	a1 30       	cpi	r26, 0x01	; 1
 196:	b2 07       	cpc	r27, r18
 198:	e1 f7       	brne	.-8      	; 0x192 <.do_clear_bss_loop>
 19a:	02 d0       	rcall	.+4      	; 0x1a0 <main>
 19c:	c7 c5       	rjmp	.+2958   	; 0xd2c <_exit>

0000019e <__bad_interrupt>:
 19e:	30 cf       	rjmp	.-416    	; 0x0 <__vectors>

000001a0 <main>:
void updateSegment(unsigned int segNumber);	//Sets the 7-segment based on a number, the position shifts with every update
uint8_t numberToBitmask(uint8_t num);	//Turns any number into a 7-segment bitmask
void edgeDetect(edge *port);	//Function used for edge detection

//***MAIN ROUTINE***
int main(void){
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
 1a8:	66 97       	sbiw	r28, 0x16	; 22
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
	//**Init**
	
	//**Variables**
	uint8_t isRunning;
	uint8_t halfStepper; //In order to run 5mS delay but increment delayCouner_pv only every 10mS
	unsigned int delayCounter_pv = 0;
 1b4:	1b 82       	std	Y+3, r1	; 0x03
 1b6:	1a 82       	std	Y+2, r1	; 0x02
	edge ctrlButtons = {0,0,&PINJ};
 1b8:	25 e0       	ldi	r18, 0x05	; 5
 1ba:	ce 01       	movw	r24, r28
 1bc:	42 96       	adiw	r24, 0x12	; 18
 1be:	fc 01       	movw	r30, r24
 1c0:	32 2f       	mov	r19, r18
 1c2:	11 92       	st	Z+, r1
 1c4:	3a 95       	dec	r19
 1c6:	e9 f7       	brne	.-6      	; 0x1c2 <main+0x22>
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	9d 8b       	std	Y+21, r25	; 0x15
 1ce:	8c 8b       	std	Y+20, r24	; 0x14
		
	//**Data Direction Registers**
	//*1=Output*
	DDRG = 0xff;
 1d0:	83 e3       	ldi	r24, 0x33	; 51
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	fc 01       	movw	r30, r24
 1d8:	20 83       	st	Z, r18
	DDRH = 0xff;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	fc 01       	movw	r30, r24
 1e2:	20 83       	st	Z, r18
	DDRJ = 0;
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	fc 01       	movw	r30, r24
 1ea:	10 82       	st	Z, r1
	
	//**Turn on the colon led and enable the segment**
	colonOn;
 1ec:	84 e3       	ldi	r24, 0x34	; 52
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	24 e3       	ldi	r18, 0x34	; 52
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	f9 01       	movw	r30, r18
 1f6:	20 81       	ld	r18, Z
 1f8:	20 61       	ori	r18, 0x10	; 16
 1fa:	fc 01       	movw	r30, r24
 1fc:	20 83       	st	Z, r18
	segEnable;
 1fe:	84 e3       	ldi	r24, 0x34	; 52
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	24 e3       	ldi	r18, 0x34	; 52
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	f9 01       	movw	r30, r18
 208:	20 81       	ld	r18, Z
 20a:	24 60       	ori	r18, 0x04	; 4
 20c:	fc 01       	movw	r30, r24
 20e:	20 83       	st	Z, r18
	//***SUPER LOOP***
    while (1){
		
		//**Detect positive Edges on StartStop and Reset**
		if(tstStartStop_pos) isRunning = !isRunning;
 210:	8a 89       	ldd	r24, Y+18	; 0x12
 212:	88 2f       	mov	r24, r24
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	81 70       	andi	r24, 0x01	; 1
 218:	99 27       	eor	r25, r25
 21a:	89 2b       	or	r24, r25
 21c:	31 f0       	breq	.+12     	; 0x22a <main+0x8a>
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	99 81       	ldd	r25, Y+1	; 0x01
 222:	99 23       	and	r25, r25
 224:	09 f0       	breq	.+2      	; 0x228 <main+0x88>
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	89 83       	std	Y+1, r24	; 0x01
		if(tstReset_pos){
 22a:	8a 89       	ldd	r24, Y+18	; 0x12
 22c:	88 2f       	mov	r24, r24
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	82 70       	andi	r24, 0x02	; 2
 232:	99 27       	eor	r25, r25
 234:	89 2b       	or	r24, r25
 236:	19 f0       	breq	.+6      	; 0x23e <main+0x9e>
			delayCounter_pv = 0;
 238:	1b 82       	std	Y+3, r1	; 0x03
 23a:	1a 82       	std	Y+2, r1	; 0x02
			isRunning = 0;
 23c:	19 82       	std	Y+1, r1	; 0x01
		}
		
		//**Update the segment**
		if(delayCounter_pv == 0)updateSegment(0);
 23e:	8a 81       	ldd	r24, Y+2	; 0x02
 240:	9b 81       	ldd	r25, Y+3	; 0x03
 242:	89 2b       	or	r24, r25
 244:	21 f4       	brne	.+8      	; 0x24e <main+0xae>
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	81 d0       	rcall	.+258    	; 0x34e <updateSegment>
 24c:	03 c0       	rjmp	.+6      	; 0x254 <main+0xb4>
		else updateSegment(delayCounter_pv);
 24e:	8a 81       	ldd	r24, Y+2	; 0x02
 250:	9b 81       	ldd	r25, Y+3	; 0x03
 252:	7d d0       	rcall	.+250    	; 0x34e <updateSegment>
		
		//**Do half steps and stop at a minute (59'990mS)**
		if(delayCounter_pv < 9999 && isRunning){
 254:	8a 81       	ldd	r24, Y+2	; 0x02
 256:	9b 81       	ldd	r25, Y+3	; 0x03
 258:	8f 30       	cpi	r24, 0x0F	; 15
 25a:	97 42       	sbci	r25, 0x27	; 39
 25c:	40 f4       	brcc	.+16     	; 0x26e <main+0xce>
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	88 23       	and	r24, r24
 262:	29 f0       	breq	.+10     	; 0x26e <main+0xce>
			/*if(halfStepper){
				halfStepper = 0;
				delayCounter_pv++;
			}
			else halfStepper = 1;*/
			delayCounter_pv++;
 264:	8a 81       	ldd	r24, Y+2	; 0x02
 266:	9b 81       	ldd	r25, Y+3	; 0x03
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	9b 83       	std	Y+3, r25	; 0x03
 26c:	8a 83       	std	Y+2, r24	; 0x02
		}
		
		//**Detect the edges**
		edgeDetect(&ctrlButtons);
 26e:	ce 01       	movw	r24, r28
 270:	42 96       	adiw	r24, 0x12	; 18
 272:	a4 d1       	rcall	.+840    	; 0x5bc <edgeDetect>
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	a0 e2       	ldi	r26, 0x20	; 32
 27a:	b1 e4       	ldi	r27, 0x41	; 65
 27c:	8c 83       	std	Y+4, r24	; 0x04
 27e:	9d 83       	std	Y+5, r25	; 0x05
 280:	ae 83       	std	Y+6, r26	; 0x06
 282:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	4a e7       	ldi	r20, 0x7A	; 122
 28a:	55 e4       	ldi	r21, 0x45	; 69
 28c:	6c 81       	ldd	r22, Y+4	; 0x04
 28e:	7d 81       	ldd	r23, Y+5	; 0x05
 290:	8e 81       	ldd	r24, Y+6	; 0x06
 292:	9f 81       	ldd	r25, Y+7	; 0x07
 294:	16 d3       	rcall	.+1580   	; 0x8c2 <__mulsf3>
 296:	dc 01       	movw	r26, r24
 298:	cb 01       	movw	r24, r22
 29a:	88 87       	std	Y+8, r24	; 0x08
 29c:	99 87       	std	Y+9, r25	; 0x09
 29e:	aa 87       	std	Y+10, r26	; 0x0a
 2a0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	40 e8       	ldi	r20, 0x80	; 128
 2a8:	5f e3       	ldi	r21, 0x3F	; 63
 2aa:	68 85       	ldd	r22, Y+8	; 0x08
 2ac:	79 85       	ldd	r23, Y+9	; 0x09
 2ae:	8a 85       	ldd	r24, Y+10	; 0x0a
 2b0:	9b 85       	ldd	r25, Y+11	; 0x0b
 2b2:	b9 d1       	rcall	.+882    	; 0x626 <__cmpsf2>
 2b4:	88 23       	and	r24, r24
 2b6:	2c f4       	brge	.+10     	; 0x2c2 <main+0x122>
		__ticks = 1;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	9d 87       	std	Y+13, r25	; 0x0d
 2be:	8c 87       	std	Y+12, r24	; 0x0c
 2c0:	3b c0       	rjmp	.+118    	; 0x338 <main+0x198>
	else if (__tmp > 65535)
 2c2:	20 e0       	ldi	r18, 0x00	; 0
 2c4:	3f ef       	ldi	r19, 0xFF	; 255
 2c6:	4f e7       	ldi	r20, 0x7F	; 127
 2c8:	57 e4       	ldi	r21, 0x47	; 71
 2ca:	68 85       	ldd	r22, Y+8	; 0x08
 2cc:	79 85       	ldd	r23, Y+9	; 0x09
 2ce:	8a 85       	ldd	r24, Y+10	; 0x0a
 2d0:	9b 85       	ldd	r25, Y+11	; 0x0b
 2d2:	f3 d2       	rcall	.+1510   	; 0x8ba <__gesf2>
 2d4:	18 16       	cp	r1, r24
 2d6:	3c f5       	brge	.+78     	; 0x326 <main+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	40 e2       	ldi	r20, 0x20	; 32
 2de:	51 e4       	ldi	r21, 0x41	; 65
 2e0:	6c 81       	ldd	r22, Y+4	; 0x04
 2e2:	7d 81       	ldd	r23, Y+5	; 0x05
 2e4:	8e 81       	ldd	r24, Y+6	; 0x06
 2e6:	9f 81       	ldd	r25, Y+7	; 0x07
 2e8:	ec d2       	rcall	.+1496   	; 0x8c2 <__mulsf3>
 2ea:	dc 01       	movw	r26, r24
 2ec:	cb 01       	movw	r24, r22
 2ee:	bc 01       	movw	r22, r24
 2f0:	cd 01       	movw	r24, r26
 2f2:	05 d2       	rcall	.+1034   	; 0x6fe <__fixunssfsi>
 2f4:	dc 01       	movw	r26, r24
 2f6:	cb 01       	movw	r24, r22
 2f8:	9d 87       	std	Y+13, r25	; 0x0d
 2fa:	8c 87       	std	Y+12, r24	; 0x0c
 2fc:	0f c0       	rjmp	.+30     	; 0x31c <main+0x17c>
 2fe:	80 e9       	ldi	r24, 0x90	; 144
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	9f 87       	std	Y+15, r25	; 0x0f
 304:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 306:	8e 85       	ldd	r24, Y+14	; 0x0e
 308:	9f 85       	ldd	r25, Y+15	; 0x0f
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <main+0x16a>
 30e:	9f 87       	std	Y+15, r25	; 0x0f
 310:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 312:	8c 85       	ldd	r24, Y+12	; 0x0c
 314:	9d 85       	ldd	r25, Y+13	; 0x0d
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	9d 87       	std	Y+13, r25	; 0x0d
 31a:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 31c:	8c 85       	ldd	r24, Y+12	; 0x0c
 31e:	9d 85       	ldd	r25, Y+13	; 0x0d
 320:	89 2b       	or	r24, r25
 322:	69 f7       	brne	.-38     	; 0x2fe <main+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 324:	13 c0       	rjmp	.+38     	; 0x34c <main+0x1ac>
 326:	68 85       	ldd	r22, Y+8	; 0x08
 328:	79 85       	ldd	r23, Y+9	; 0x09
 32a:	8a 85       	ldd	r24, Y+10	; 0x0a
 32c:	9b 85       	ldd	r25, Y+11	; 0x0b
 32e:	e7 d1       	rcall	.+974    	; 0x6fe <__fixunssfsi>
 330:	dc 01       	movw	r26, r24
 332:	cb 01       	movw	r24, r22
 334:	9d 87       	std	Y+13, r25	; 0x0d
 336:	8c 87       	std	Y+12, r24	; 0x0c
 338:	8c 85       	ldd	r24, Y+12	; 0x0c
 33a:	9d 85       	ldd	r25, Y+13	; 0x0d
 33c:	99 8b       	std	Y+17, r25	; 0x11
 33e:	88 8b       	std	Y+16, r24	; 0x10
 340:	88 89       	ldd	r24, Y+16	; 0x10
 342:	99 89       	ldd	r25, Y+17	; 0x11
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <main+0x1a4>
 348:	99 8b       	std	Y+17, r25	; 0x11
 34a:	88 8b       	std	Y+16, r24	; 0x10
		_delay_ms(10);
    }
 34c:	61 cf       	rjmp	.-318    	; 0x210 <main+0x70>

0000034e <updateSegment>:
 * Note: This function takes care of the incremeting
 * so no individual segment can be set.
 * @param segNumber: The Number to display
 * @return: VOID
*/
void updateSegment(unsigned int segNumber){
 34e:	cf 92       	push	r12
 350:	df 92       	push	r13
 352:	ef 92       	push	r14
 354:	ff 92       	push	r15
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	00 d0       	rcall	.+0      	; 0x35c <updateSegment+0xe>
 35c:	1f 92       	push	r1
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
 362:	9c 83       	std	Y+4, r25	; 0x04
 364:	8b 83       	std	Y+3, r24	; 0x03
	static uint8_t segPos;
	
	//**Select which segment is currently being displayed**
	switch(segPos){
 366:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 36a:	88 2f       	mov	r24, r24
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	91 05       	cpc	r25, r1
 372:	f9 f0       	breq	.+62     	; 0x3b2 <updateSegment+0x64>
 374:	82 30       	cpi	r24, 0x02	; 2
 376:	91 05       	cpc	r25, r1
 378:	1c f4       	brge	.+6      	; 0x380 <updateSegment+0x32>
 37a:	89 2b       	or	r24, r25
 37c:	39 f0       	breq	.+14     	; 0x38c <updateSegment+0x3e>
 37e:	52 c0       	rjmp	.+164    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 380:	82 30       	cpi	r24, 0x02	; 2
 382:	91 05       	cpc	r25, r1
 384:	49 f1       	breq	.+82     	; 0x3d8 <updateSegment+0x8a>
 386:	03 97       	sbiw	r24, 0x03	; 3
 388:	d1 f1       	breq	.+116    	; 0x3fe <updateSegment+0xb0>
 38a:	4c c0       	rjmp	.+152    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		case 0:
			segSel0_off;
 38c:	84 e3       	ldi	r24, 0x34	; 52
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	24 e3       	ldi	r18, 0x34	; 52
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	f9 01       	movw	r30, r18
 396:	20 81       	ld	r18, Z
 398:	2e 7f       	andi	r18, 0xFE	; 254
 39a:	fc 01       	movw	r30, r24
 39c:	20 83       	st	Z, r18
			segSel1_off;
 39e:	84 e3       	ldi	r24, 0x34	; 52
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	24 e3       	ldi	r18, 0x34	; 52
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	f9 01       	movw	r30, r18
 3a8:	20 81       	ld	r18, Z
 3aa:	2d 7f       	andi	r18, 0xFD	; 253
 3ac:	fc 01       	movw	r30, r24
 3ae:	20 83       	st	Z, r18
			break;
 3b0:	4c c0       	rjmp	.+152    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		case 1:
			segSel0_on;
 3b2:	84 e3       	ldi	r24, 0x34	; 52
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	24 e3       	ldi	r18, 0x34	; 52
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	f9 01       	movw	r30, r18
 3bc:	20 81       	ld	r18, Z
 3be:	21 60       	ori	r18, 0x01	; 1
 3c0:	fc 01       	movw	r30, r24
 3c2:	20 83       	st	Z, r18
			segSel1_off;
 3c4:	84 e3       	ldi	r24, 0x34	; 52
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	24 e3       	ldi	r18, 0x34	; 52
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	f9 01       	movw	r30, r18
 3ce:	20 81       	ld	r18, Z
 3d0:	2d 7f       	andi	r18, 0xFD	; 253
 3d2:	fc 01       	movw	r30, r24
 3d4:	20 83       	st	Z, r18
			break;
 3d6:	39 c0       	rjmp	.+114    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		case 2:
			segSel0_off;
 3d8:	84 e3       	ldi	r24, 0x34	; 52
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	24 e3       	ldi	r18, 0x34	; 52
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	f9 01       	movw	r30, r18
 3e2:	20 81       	ld	r18, Z
 3e4:	2e 7f       	andi	r18, 0xFE	; 254
 3e6:	fc 01       	movw	r30, r24
 3e8:	20 83       	st	Z, r18
			segSel1_on;
 3ea:	84 e3       	ldi	r24, 0x34	; 52
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	24 e3       	ldi	r18, 0x34	; 52
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	f9 01       	movw	r30, r18
 3f4:	20 81       	ld	r18, Z
 3f6:	22 60       	ori	r18, 0x02	; 2
 3f8:	fc 01       	movw	r30, r24
 3fa:	20 83       	st	Z, r18
			break;
 3fc:	26 c0       	rjmp	.+76     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		case 3:
			segSel0_on;
 3fe:	84 e3       	ldi	r24, 0x34	; 52
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	24 e3       	ldi	r18, 0x34	; 52
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	f9 01       	movw	r30, r18
 408:	20 81       	ld	r18, Z
 40a:	21 60       	ori	r18, 0x01	; 1
 40c:	fc 01       	movw	r30, r24
 40e:	20 83       	st	Z, r18
			segSel1_on;
 410:	84 e3       	ldi	r24, 0x34	; 52
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	24 e3       	ldi	r18, 0x34	; 52
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	f9 01       	movw	r30, r18
 41a:	20 81       	ld	r18, Z
 41c:	22 60       	ori	r18, 0x02	; 2
 41e:	fc 01       	movw	r30, r24
 420:	20 83       	st	Z, r18
			break;
 422:	13 c0       	rjmp	.+38     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		default:
			segSel0_off;
 424:	84 e3       	ldi	r24, 0x34	; 52
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	24 e3       	ldi	r18, 0x34	; 52
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	f9 01       	movw	r30, r18
 42e:	20 81       	ld	r18, Z
 430:	2e 7f       	andi	r18, 0xFE	; 254
 432:	fc 01       	movw	r30, r24
 434:	20 83       	st	Z, r18
			segSel1_off;
 436:	84 e3       	ldi	r24, 0x34	; 52
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	24 e3       	ldi	r18, 0x34	; 52
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	f9 01       	movw	r30, r18
 440:	20 81       	ld	r18, Z
 442:	2d 7f       	andi	r18, 0xFD	; 253
 444:	fc 01       	movw	r30, r24
			break;
 446:	20 83       	st	Z, r18
	}
	
	//**Create the bitmask for the given number and set PORTH to it**
	uint8_t bitmask;
	if(segNumber == 0){
 448:	00 00       	nop
 44a:	8b 81       	ldd	r24, Y+3	; 0x03
 44c:	9c 81       	ldd	r25, Y+4	; 0x04
 44e:	89 2b       	or	r24, r25
		bitmask = numberToBitmask(0); //If the given number is zero, display it as such
 450:	21 f4       	brne	.+8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	7e d0       	rcall	.+252    	; 0x552 <numberToBitmask>
 456:	89 83       	std	Y+1, r24	; 0x01
	}
	else{
		uint8_t segDigit;
		segDigit = ((uint8_t)(segNumber/pow(10, segPos)))%10;	//Get the digit at segPos from segNumber
 458:	3e c0       	rjmp	.+124    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 45a:	8b 81       	ldd	r24, Y+3	; 0x03
 45c:	9c 81       	ldd	r25, Y+4	; 0x04
 45e:	cc 01       	movw	r24, r24
 460:	a0 e0       	ldi	r26, 0x00	; 0
 462:	b0 e0       	ldi	r27, 0x00	; 0
 464:	bc 01       	movw	r22, r24
 466:	cd 01       	movw	r24, r26
 468:	76 d1       	rcall	.+748    	; 0x756 <__floatunsisf>
 46a:	6b 01       	movw	r12, r22
 46c:	7c 01       	movw	r14, r24
 46e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 472:	88 2f       	mov	r24, r24
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	a0 e0       	ldi	r26, 0x00	; 0
 478:	b0 e0       	ldi	r27, 0x00	; 0
 47a:	bc 01       	movw	r22, r24
 47c:	cd 01       	movw	r24, r26
 47e:	6b d1       	rcall	.+726    	; 0x756 <__floatunsisf>
 480:	dc 01       	movw	r26, r24
 482:	cb 01       	movw	r24, r22
 484:	9c 01       	movw	r18, r24
 486:	ad 01       	movw	r20, r26
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	80 e2       	ldi	r24, 0x20	; 32
 48e:	91 e4       	ldi	r25, 0x41	; 65
 490:	7b d2       	rcall	.+1270   	; 0x988 <pow>
 492:	dc 01       	movw	r26, r24
 494:	cb 01       	movw	r24, r22
 496:	9c 01       	movw	r18, r24
 498:	ad 01       	movw	r20, r26
 49a:	c7 01       	movw	r24, r14
 49c:	b6 01       	movw	r22, r12
 49e:	c7 d0       	rcall	.+398    	; 0x62e <__divsf3>
 4a0:	dc 01       	movw	r26, r24
 4a2:	cb 01       	movw	r24, r22
 4a4:	bc 01       	movw	r22, r24
 4a6:	cd 01       	movw	r24, r26
 4a8:	2a d1       	rcall	.+596    	; 0x6fe <__fixunssfsi>
 4aa:	dc 01       	movw	r26, r24
 4ac:	cb 01       	movw	r24, r22
 4ae:	98 2f       	mov	r25, r24
 4b0:	8d ec       	ldi	r24, 0xCD	; 205
 4b2:	98 9f       	mul	r25, r24
 4b4:	81 2d       	mov	r24, r1
 4b6:	11 24       	eor	r1, r1
 4b8:	86 95       	lsr	r24
 4ba:	86 95       	lsr	r24
 4bc:	86 95       	lsr	r24
 4be:	88 0f       	add	r24, r24
 4c0:	28 2f       	mov	r18, r24
 4c2:	22 0f       	add	r18, r18
 4c4:	22 0f       	add	r18, r18
 4c6:	82 0f       	add	r24, r18
 4c8:	f9 2f       	mov	r31, r25
 4ca:	f8 1b       	sub	r31, r24
 4cc:	8f 2f       	mov	r24, r31
		bitmask = numberToBitmask(segDigit);
 4ce:	8a 83       	std	Y+2, r24	; 0x02
 4d0:	8a 81       	ldd	r24, Y+2	; 0x02
 4d2:	3f d0       	rcall	.+126    	; 0x552 <numberToBitmask>
 4d4:	89 83       	std	Y+1, r24	; 0x01
	}
	segDisable;
 4d6:	84 e3       	ldi	r24, 0x34	; 52
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	24 e3       	ldi	r18, 0x34	; 52
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	f9 01       	movw	r30, r18
 4e0:	20 81       	ld	r18, Z
 4e2:	2b 7f       	andi	r18, 0xFB	; 251
 4e4:	fc 01       	movw	r30, r24
 4e6:	20 83       	st	Z, r18
	setSeg(bitmask);
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	91 e0       	ldi	r25, 0x01	; 1
 4ec:	22 e0       	ldi	r18, 0x02	; 2
 4ee:	31 e0       	ldi	r19, 0x01	; 1
 4f0:	f9 01       	movw	r30, r18
 4f2:	30 81       	ld	r19, Z
 4f4:	29 81       	ldd	r18, Y+1	; 0x01
 4f6:	23 2b       	or	r18, r19
 4f8:	fc 01       	movw	r30, r24
 4fa:	20 83       	st	Z, r18
	delSeg(bitmask);
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	22 e0       	ldi	r18, 0x02	; 2
 502:	31 e0       	ldi	r19, 0x01	; 1
 504:	f9 01       	movw	r30, r18
 506:	30 81       	ld	r19, Z
 508:	29 81       	ldd	r18, Y+1	; 0x01
 50a:	23 23       	and	r18, r19
 50c:	fc 01       	movw	r30, r24
 50e:	20 83       	st	Z, r18
	segEnable;
 510:	84 e3       	ldi	r24, 0x34	; 52
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	24 e3       	ldi	r18, 0x34	; 52
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	f9 01       	movw	r30, r18
 51a:	20 81       	ld	r18, Z
 51c:	24 60       	ori	r18, 0x04	; 4
 51e:	fc 01       	movw	r30, r24
 520:	20 83       	st	Z, r18
	
	if(segPos < 3) segPos++; //increment the segment position till the last segment
 522:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 526:	83 30       	cpi	r24, 0x03	; 3
 528:	30 f4       	brcc	.+12     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 52a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 52e:	8f 5f       	subi	r24, 0xFF	; 255
 530:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
	else segPos = 0; //set the segment position to zero if its past the last one
}
 534:	02 c0       	rjmp	.+4      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
	setSeg(bitmask);
	delSeg(bitmask);
	segEnable;
	
	if(segPos < 3) segPos++; //increment the segment position till the last segment
	else segPos = 0; //set the segment position to zero if its past the last one
 536:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
}
 53a:	00 00       	nop
 53c:	0f 90       	pop	r0
 53e:	0f 90       	pop	r0
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	ff 90       	pop	r15
 54a:	ef 90       	pop	r14
 54c:	df 90       	pop	r13
 54e:	cf 90       	pop	r12
 550:	08 95       	ret

00000552 <numberToBitmask>:
/***NUMBER TO BITMASK***
 * Turns a number into a seven segment bitmask
 * @param: num = the number to turn into a 7-segment bitmask
 * @return: the bitmask of the given number
*/
uint8_t numberToBitmask(uint8_t num){
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	1f 92       	push	r1
 558:	cd b7       	in	r28, 0x3d	; 61
 55a:	de b7       	in	r29, 0x3e	; 62
 55c:	89 83       	std	Y+1, r24	; 0x01
	switch(num){
 55e:	89 81       	ldd	r24, Y+1	; 0x01
 560:	88 2f       	mov	r24, r24
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	09 2e       	mov	r0, r25
 566:	00 0c       	add	r0, r0
 568:	aa 0b       	sbc	r26, r26
 56a:	bb 0b       	sbc	r27, r27
 56c:	40 e0       	ldi	r20, 0x00	; 0
 56e:	50 e0       	ldi	r21, 0x00	; 0
 570:	29 e0       	ldi	r18, 0x09	; 9
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	84 1b       	sub	r24, r20
 576:	95 0b       	sbc	r25, r21
 578:	28 17       	cp	r18, r24
 57a:	39 07       	cpc	r19, r25
 57c:	d0 f0       	brcs	.+52     	; 0x5b2 <numberToBitmask+0x60>
 57e:	fc 01       	movw	r30, r24
 580:	88 27       	eor	r24, r24
 582:	ee 58       	subi	r30, 0x8E	; 142
 584:	ff 4f       	sbci	r31, 0xFF	; 255
 586:	8f 4f       	sbci	r24, 0xFF	; 255
 588:	c9 c3       	rjmp	.+1938   	; 0xd1c <__tablejump2__>
		case 0:
			return 0b00111111;
 58a:	8f e3       	ldi	r24, 0x3F	; 63
 58c:	13 c0       	rjmp	.+38     	; 0x5b4 <numberToBitmask+0x62>
		case 1:
			return 0b00000110;
 58e:	86 e0       	ldi	r24, 0x06	; 6
 590:	11 c0       	rjmp	.+34     	; 0x5b4 <numberToBitmask+0x62>
		case 2:
			return 0b01011011;
 592:	8b e5       	ldi	r24, 0x5B	; 91
 594:	0f c0       	rjmp	.+30     	; 0x5b4 <numberToBitmask+0x62>
		case 3:
			return 0b01001111;
 596:	8f e4       	ldi	r24, 0x4F	; 79
 598:	0d c0       	rjmp	.+26     	; 0x5b4 <numberToBitmask+0x62>
		case 4:
			return 0b01100110;
 59a:	86 e6       	ldi	r24, 0x66	; 102
 59c:	0b c0       	rjmp	.+22     	; 0x5b4 <numberToBitmask+0x62>
		case 5:
			return 0b01101101;
 59e:	8d e6       	ldi	r24, 0x6D	; 109
 5a0:	09 c0       	rjmp	.+18     	; 0x5b4 <numberToBitmask+0x62>
		case 6:
			return 0b01111101;
 5a2:	8d e7       	ldi	r24, 0x7D	; 125
 5a4:	07 c0       	rjmp	.+14     	; 0x5b4 <numberToBitmask+0x62>
		case 7:
			return 0b00000111;
 5a6:	87 e0       	ldi	r24, 0x07	; 7
 5a8:	05 c0       	rjmp	.+10     	; 0x5b4 <numberToBitmask+0x62>
		case 8:
			return 0b01111111;
 5aa:	8f e7       	ldi	r24, 0x7F	; 127
 5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <numberToBitmask+0x62>
		case 9:
			return 0b01101111;
 5ae:	8f e6       	ldi	r24, 0x6F	; 111
 5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <numberToBitmask+0x62>
		default:
			return 0b01000000;
 5b2:	80 e4       	ldi	r24, 0x40	; 64
	}
}
 5b4:	0f 90       	pop	r0
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	08 95       	ret

000005bc <edgeDetect>:
// ***EDGE DETECTION***
/**
*@param: An edge struct is needed which defines stores all the necessary stuff for the edge detection
*@return: VOID
*/
void edgeDetect(edge *port){
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	00 d0       	rcall	.+0      	; 0x5c2 <edgeDetect+0x6>
 5c2:	cd b7       	in	r28, 0x3d	; 61
 5c4:	de b7       	in	r29, 0x3e	; 62
 5c6:	9b 83       	std	Y+3, r25	; 0x03
 5c8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t pinjCurrent = *(port->port);
 5ca:	8a 81       	ldd	r24, Y+2	; 0x02
 5cc:	9b 81       	ldd	r25, Y+3	; 0x03
 5ce:	fc 01       	movw	r30, r24
 5d0:	82 81       	ldd	r24, Z+2	; 0x02
 5d2:	93 81       	ldd	r25, Z+3	; 0x03
 5d4:	fc 01       	movw	r30, r24
 5d6:	80 81       	ld	r24, Z
 5d8:	89 83       	std	Y+1, r24	; 0x01
	port->pinPos = pinjCurrent & ~port->old;
 5da:	8a 81       	ldd	r24, Y+2	; 0x02
 5dc:	9b 81       	ldd	r25, Y+3	; 0x03
 5de:	fc 01       	movw	r30, r24
 5e0:	84 81       	ldd	r24, Z+4	; 0x04
 5e2:	98 2f       	mov	r25, r24
 5e4:	90 95       	com	r25
 5e6:	89 81       	ldd	r24, Y+1	; 0x01
 5e8:	89 23       	and	r24, r25
 5ea:	28 2f       	mov	r18, r24
 5ec:	8a 81       	ldd	r24, Y+2	; 0x02
 5ee:	9b 81       	ldd	r25, Y+3	; 0x03
 5f0:	fc 01       	movw	r30, r24
 5f2:	20 83       	st	Z, r18
	port->pinNeg = ~pinjCurrent & port->old;
 5f4:	89 81       	ldd	r24, Y+1	; 0x01
 5f6:	28 2f       	mov	r18, r24
 5f8:	20 95       	com	r18
 5fa:	8a 81       	ldd	r24, Y+2	; 0x02
 5fc:	9b 81       	ldd	r25, Y+3	; 0x03
 5fe:	fc 01       	movw	r30, r24
 600:	84 81       	ldd	r24, Z+4	; 0x04
 602:	82 23       	and	r24, r18
 604:	28 2f       	mov	r18, r24
 606:	8a 81       	ldd	r24, Y+2	; 0x02
 608:	9b 81       	ldd	r25, Y+3	; 0x03
 60a:	fc 01       	movw	r30, r24
 60c:	21 83       	std	Z+1, r18	; 0x01
	port->old = pinjCurrent;
 60e:	8a 81       	ldd	r24, Y+2	; 0x02
 610:	9b 81       	ldd	r25, Y+3	; 0x03
 612:	29 81       	ldd	r18, Y+1	; 0x01
 614:	fc 01       	movw	r30, r24
 616:	24 83       	std	Z+4, r18	; 0x04
} // **EOF**
 618:	00 00       	nop
 61a:	0f 90       	pop	r0
 61c:	0f 90       	pop	r0
 61e:	0f 90       	pop	r0
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	08 95       	ret

00000626 <__cmpsf2>:
 626:	d4 d0       	rcall	.+424    	; 0x7d0 <__fp_cmp>
 628:	08 f4       	brcc	.+2      	; 0x62c <__cmpsf2+0x6>
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	08 95       	ret

0000062e <__divsf3>:
 62e:	0c d0       	rcall	.+24     	; 0x648 <__divsf3x>
 630:	0a c1       	rjmp	.+532    	; 0x846 <__fp_round>
 632:	02 d1       	rcall	.+516    	; 0x838 <__fp_pscB>
 634:	40 f0       	brcs	.+16     	; 0x646 <__divsf3+0x18>
 636:	f9 d0       	rcall	.+498    	; 0x82a <__fp_pscA>
 638:	30 f0       	brcs	.+12     	; 0x646 <__divsf3+0x18>
 63a:	21 f4       	brne	.+8      	; 0x644 <__divsf3+0x16>
 63c:	5f 3f       	cpi	r21, 0xFF	; 255
 63e:	19 f0       	breq	.+6      	; 0x646 <__divsf3+0x18>
 640:	eb c0       	rjmp	.+470    	; 0x818 <__fp_inf>
 642:	51 11       	cpse	r21, r1
 644:	34 c1       	rjmp	.+616    	; 0x8ae <__fp_szero>
 646:	ee c0       	rjmp	.+476    	; 0x824 <__fp_nan>

00000648 <__divsf3x>:
 648:	0f d1       	rcall	.+542    	; 0x868 <__fp_split3>
 64a:	98 f3       	brcs	.-26     	; 0x632 <__divsf3+0x4>

0000064c <__divsf3_pse>:
 64c:	99 23       	and	r25, r25
 64e:	c9 f3       	breq	.-14     	; 0x642 <__divsf3+0x14>
 650:	55 23       	and	r21, r21
 652:	b1 f3       	breq	.-20     	; 0x640 <__divsf3+0x12>
 654:	95 1b       	sub	r25, r21
 656:	55 0b       	sbc	r21, r21
 658:	bb 27       	eor	r27, r27
 65a:	aa 27       	eor	r26, r26
 65c:	62 17       	cp	r22, r18
 65e:	73 07       	cpc	r23, r19
 660:	84 07       	cpc	r24, r20
 662:	38 f0       	brcs	.+14     	; 0x672 <__divsf3_pse+0x26>
 664:	9f 5f       	subi	r25, 0xFF	; 255
 666:	5f 4f       	sbci	r21, 0xFF	; 255
 668:	22 0f       	add	r18, r18
 66a:	33 1f       	adc	r19, r19
 66c:	44 1f       	adc	r20, r20
 66e:	aa 1f       	adc	r26, r26
 670:	a9 f3       	breq	.-22     	; 0x65c <__divsf3_pse+0x10>
 672:	33 d0       	rcall	.+102    	; 0x6da <__divsf3_pse+0x8e>
 674:	0e 2e       	mov	r0, r30
 676:	3a f0       	brmi	.+14     	; 0x686 <__divsf3_pse+0x3a>
 678:	e0 e8       	ldi	r30, 0x80	; 128
 67a:	30 d0       	rcall	.+96     	; 0x6dc <__divsf3_pse+0x90>
 67c:	91 50       	subi	r25, 0x01	; 1
 67e:	50 40       	sbci	r21, 0x00	; 0
 680:	e6 95       	lsr	r30
 682:	00 1c       	adc	r0, r0
 684:	ca f7       	brpl	.-14     	; 0x678 <__divsf3_pse+0x2c>
 686:	29 d0       	rcall	.+82     	; 0x6da <__divsf3_pse+0x8e>
 688:	fe 2f       	mov	r31, r30
 68a:	27 d0       	rcall	.+78     	; 0x6da <__divsf3_pse+0x8e>
 68c:	66 0f       	add	r22, r22
 68e:	77 1f       	adc	r23, r23
 690:	88 1f       	adc	r24, r24
 692:	bb 1f       	adc	r27, r27
 694:	26 17       	cp	r18, r22
 696:	37 07       	cpc	r19, r23
 698:	48 07       	cpc	r20, r24
 69a:	ab 07       	cpc	r26, r27
 69c:	b0 e8       	ldi	r27, 0x80	; 128
 69e:	09 f0       	breq	.+2      	; 0x6a2 <__divsf3_pse+0x56>
 6a0:	bb 0b       	sbc	r27, r27
 6a2:	80 2d       	mov	r24, r0
 6a4:	bf 01       	movw	r22, r30
 6a6:	ff 27       	eor	r31, r31
 6a8:	93 58       	subi	r25, 0x83	; 131
 6aa:	5f 4f       	sbci	r21, 0xFF	; 255
 6ac:	2a f0       	brmi	.+10     	; 0x6b8 <__divsf3_pse+0x6c>
 6ae:	9e 3f       	cpi	r25, 0xFE	; 254
 6b0:	51 05       	cpc	r21, r1
 6b2:	68 f0       	brcs	.+26     	; 0x6ce <__divsf3_pse+0x82>
 6b4:	b1 c0       	rjmp	.+354    	; 0x818 <__fp_inf>
 6b6:	fb c0       	rjmp	.+502    	; 0x8ae <__fp_szero>
 6b8:	5f 3f       	cpi	r21, 0xFF	; 255
 6ba:	ec f3       	brlt	.-6      	; 0x6b6 <__divsf3_pse+0x6a>
 6bc:	98 3e       	cpi	r25, 0xE8	; 232
 6be:	dc f3       	brlt	.-10     	; 0x6b6 <__divsf3_pse+0x6a>
 6c0:	86 95       	lsr	r24
 6c2:	77 95       	ror	r23
 6c4:	67 95       	ror	r22
 6c6:	b7 95       	ror	r27
 6c8:	f7 95       	ror	r31
 6ca:	9f 5f       	subi	r25, 0xFF	; 255
 6cc:	c9 f7       	brne	.-14     	; 0x6c0 <__divsf3_pse+0x74>
 6ce:	88 0f       	add	r24, r24
 6d0:	91 1d       	adc	r25, r1
 6d2:	96 95       	lsr	r25
 6d4:	87 95       	ror	r24
 6d6:	97 f9       	bld	r25, 7
 6d8:	08 95       	ret
 6da:	e1 e0       	ldi	r30, 0x01	; 1
 6dc:	66 0f       	add	r22, r22
 6de:	77 1f       	adc	r23, r23
 6e0:	88 1f       	adc	r24, r24
 6e2:	bb 1f       	adc	r27, r27
 6e4:	62 17       	cp	r22, r18
 6e6:	73 07       	cpc	r23, r19
 6e8:	84 07       	cpc	r24, r20
 6ea:	ba 07       	cpc	r27, r26
 6ec:	20 f0       	brcs	.+8      	; 0x6f6 <__divsf3_pse+0xaa>
 6ee:	62 1b       	sub	r22, r18
 6f0:	73 0b       	sbc	r23, r19
 6f2:	84 0b       	sbc	r24, r20
 6f4:	ba 0b       	sbc	r27, r26
 6f6:	ee 1f       	adc	r30, r30
 6f8:	88 f7       	brcc	.-30     	; 0x6dc <__divsf3_pse+0x90>
 6fa:	e0 95       	com	r30
 6fc:	08 95       	ret

000006fe <__fixunssfsi>:
 6fe:	bc d0       	rcall	.+376    	; 0x878 <__fp_splitA>
 700:	88 f0       	brcs	.+34     	; 0x724 <__fixunssfsi+0x26>
 702:	9f 57       	subi	r25, 0x7F	; 127
 704:	90 f0       	brcs	.+36     	; 0x72a <__fixunssfsi+0x2c>
 706:	b9 2f       	mov	r27, r25
 708:	99 27       	eor	r25, r25
 70a:	b7 51       	subi	r27, 0x17	; 23
 70c:	a0 f0       	brcs	.+40     	; 0x736 <__fixunssfsi+0x38>
 70e:	d1 f0       	breq	.+52     	; 0x744 <__fixunssfsi+0x46>
 710:	66 0f       	add	r22, r22
 712:	77 1f       	adc	r23, r23
 714:	88 1f       	adc	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	1a f0       	brmi	.+6      	; 0x720 <__fixunssfsi+0x22>
 71a:	ba 95       	dec	r27
 71c:	c9 f7       	brne	.-14     	; 0x710 <__fixunssfsi+0x12>
 71e:	12 c0       	rjmp	.+36     	; 0x744 <__fixunssfsi+0x46>
 720:	b1 30       	cpi	r27, 0x01	; 1
 722:	81 f0       	breq	.+32     	; 0x744 <__fixunssfsi+0x46>
 724:	c3 d0       	rcall	.+390    	; 0x8ac <__fp_zero>
 726:	b1 e0       	ldi	r27, 0x01	; 1
 728:	08 95       	ret
 72a:	c0 c0       	rjmp	.+384    	; 0x8ac <__fp_zero>
 72c:	67 2f       	mov	r22, r23
 72e:	78 2f       	mov	r23, r24
 730:	88 27       	eor	r24, r24
 732:	b8 5f       	subi	r27, 0xF8	; 248
 734:	39 f0       	breq	.+14     	; 0x744 <__fixunssfsi+0x46>
 736:	b9 3f       	cpi	r27, 0xF9	; 249
 738:	cc f3       	brlt	.-14     	; 0x72c <__fixunssfsi+0x2e>
 73a:	86 95       	lsr	r24
 73c:	77 95       	ror	r23
 73e:	67 95       	ror	r22
 740:	b3 95       	inc	r27
 742:	d9 f7       	brne	.-10     	; 0x73a <__fixunssfsi+0x3c>
 744:	3e f4       	brtc	.+14     	; 0x754 <__fixunssfsi+0x56>
 746:	90 95       	com	r25
 748:	80 95       	com	r24
 74a:	70 95       	com	r23
 74c:	61 95       	neg	r22
 74e:	7f 4f       	sbci	r23, 0xFF	; 255
 750:	8f 4f       	sbci	r24, 0xFF	; 255
 752:	9f 4f       	sbci	r25, 0xFF	; 255
 754:	08 95       	ret

00000756 <__floatunsisf>:
 756:	e8 94       	clt
 758:	09 c0       	rjmp	.+18     	; 0x76c <__floatsisf+0x12>

0000075a <__floatsisf>:
 75a:	97 fb       	bst	r25, 7
 75c:	3e f4       	brtc	.+14     	; 0x76c <__floatsisf+0x12>
 75e:	90 95       	com	r25
 760:	80 95       	com	r24
 762:	70 95       	com	r23
 764:	61 95       	neg	r22
 766:	7f 4f       	sbci	r23, 0xFF	; 255
 768:	8f 4f       	sbci	r24, 0xFF	; 255
 76a:	9f 4f       	sbci	r25, 0xFF	; 255
 76c:	99 23       	and	r25, r25
 76e:	a9 f0       	breq	.+42     	; 0x79a <__floatsisf+0x40>
 770:	f9 2f       	mov	r31, r25
 772:	96 e9       	ldi	r25, 0x96	; 150
 774:	bb 27       	eor	r27, r27
 776:	93 95       	inc	r25
 778:	f6 95       	lsr	r31
 77a:	87 95       	ror	r24
 77c:	77 95       	ror	r23
 77e:	67 95       	ror	r22
 780:	b7 95       	ror	r27
 782:	f1 11       	cpse	r31, r1
 784:	f8 cf       	rjmp	.-16     	; 0x776 <__floatsisf+0x1c>
 786:	fa f4       	brpl	.+62     	; 0x7c6 <__floatsisf+0x6c>
 788:	bb 0f       	add	r27, r27
 78a:	11 f4       	brne	.+4      	; 0x790 <__floatsisf+0x36>
 78c:	60 ff       	sbrs	r22, 0
 78e:	1b c0       	rjmp	.+54     	; 0x7c6 <__floatsisf+0x6c>
 790:	6f 5f       	subi	r22, 0xFF	; 255
 792:	7f 4f       	sbci	r23, 0xFF	; 255
 794:	8f 4f       	sbci	r24, 0xFF	; 255
 796:	9f 4f       	sbci	r25, 0xFF	; 255
 798:	16 c0       	rjmp	.+44     	; 0x7c6 <__floatsisf+0x6c>
 79a:	88 23       	and	r24, r24
 79c:	11 f0       	breq	.+4      	; 0x7a2 <__floatsisf+0x48>
 79e:	96 e9       	ldi	r25, 0x96	; 150
 7a0:	11 c0       	rjmp	.+34     	; 0x7c4 <__floatsisf+0x6a>
 7a2:	77 23       	and	r23, r23
 7a4:	21 f0       	breq	.+8      	; 0x7ae <__floatsisf+0x54>
 7a6:	9e e8       	ldi	r25, 0x8E	; 142
 7a8:	87 2f       	mov	r24, r23
 7aa:	76 2f       	mov	r23, r22
 7ac:	05 c0       	rjmp	.+10     	; 0x7b8 <__floatsisf+0x5e>
 7ae:	66 23       	and	r22, r22
 7b0:	71 f0       	breq	.+28     	; 0x7ce <__floatsisf+0x74>
 7b2:	96 e8       	ldi	r25, 0x86	; 134
 7b4:	86 2f       	mov	r24, r22
 7b6:	70 e0       	ldi	r23, 0x00	; 0
 7b8:	60 e0       	ldi	r22, 0x00	; 0
 7ba:	2a f0       	brmi	.+10     	; 0x7c6 <__floatsisf+0x6c>
 7bc:	9a 95       	dec	r25
 7be:	66 0f       	add	r22, r22
 7c0:	77 1f       	adc	r23, r23
 7c2:	88 1f       	adc	r24, r24
 7c4:	da f7       	brpl	.-10     	; 0x7bc <__floatsisf+0x62>
 7c6:	88 0f       	add	r24, r24
 7c8:	96 95       	lsr	r25
 7ca:	87 95       	ror	r24
 7cc:	97 f9       	bld	r25, 7
 7ce:	08 95       	ret

000007d0 <__fp_cmp>:
 7d0:	99 0f       	add	r25, r25
 7d2:	00 08       	sbc	r0, r0
 7d4:	55 0f       	add	r21, r21
 7d6:	aa 0b       	sbc	r26, r26
 7d8:	e0 e8       	ldi	r30, 0x80	; 128
 7da:	fe ef       	ldi	r31, 0xFE	; 254
 7dc:	16 16       	cp	r1, r22
 7de:	17 06       	cpc	r1, r23
 7e0:	e8 07       	cpc	r30, r24
 7e2:	f9 07       	cpc	r31, r25
 7e4:	c0 f0       	brcs	.+48     	; 0x816 <__fp_cmp+0x46>
 7e6:	12 16       	cp	r1, r18
 7e8:	13 06       	cpc	r1, r19
 7ea:	e4 07       	cpc	r30, r20
 7ec:	f5 07       	cpc	r31, r21
 7ee:	98 f0       	brcs	.+38     	; 0x816 <__fp_cmp+0x46>
 7f0:	62 1b       	sub	r22, r18
 7f2:	73 0b       	sbc	r23, r19
 7f4:	84 0b       	sbc	r24, r20
 7f6:	95 0b       	sbc	r25, r21
 7f8:	39 f4       	brne	.+14     	; 0x808 <__fp_cmp+0x38>
 7fa:	0a 26       	eor	r0, r26
 7fc:	61 f0       	breq	.+24     	; 0x816 <__fp_cmp+0x46>
 7fe:	23 2b       	or	r18, r19
 800:	24 2b       	or	r18, r20
 802:	25 2b       	or	r18, r21
 804:	21 f4       	brne	.+8      	; 0x80e <__fp_cmp+0x3e>
 806:	08 95       	ret
 808:	0a 26       	eor	r0, r26
 80a:	09 f4       	brne	.+2      	; 0x80e <__fp_cmp+0x3e>
 80c:	a1 40       	sbci	r26, 0x01	; 1
 80e:	a6 95       	lsr	r26
 810:	8f ef       	ldi	r24, 0xFF	; 255
 812:	81 1d       	adc	r24, r1
 814:	81 1d       	adc	r24, r1
 816:	08 95       	ret

00000818 <__fp_inf>:
 818:	97 f9       	bld	r25, 7
 81a:	9f 67       	ori	r25, 0x7F	; 127
 81c:	80 e8       	ldi	r24, 0x80	; 128
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	60 e0       	ldi	r22, 0x00	; 0
 822:	08 95       	ret

00000824 <__fp_nan>:
 824:	9f ef       	ldi	r25, 0xFF	; 255
 826:	80 ec       	ldi	r24, 0xC0	; 192
 828:	08 95       	ret

0000082a <__fp_pscA>:
 82a:	00 24       	eor	r0, r0
 82c:	0a 94       	dec	r0
 82e:	16 16       	cp	r1, r22
 830:	17 06       	cpc	r1, r23
 832:	18 06       	cpc	r1, r24
 834:	09 06       	cpc	r0, r25
 836:	08 95       	ret

00000838 <__fp_pscB>:
 838:	00 24       	eor	r0, r0
 83a:	0a 94       	dec	r0
 83c:	12 16       	cp	r1, r18
 83e:	13 06       	cpc	r1, r19
 840:	14 06       	cpc	r1, r20
 842:	05 06       	cpc	r0, r21
 844:	08 95       	ret

00000846 <__fp_round>:
 846:	09 2e       	mov	r0, r25
 848:	03 94       	inc	r0
 84a:	00 0c       	add	r0, r0
 84c:	11 f4       	brne	.+4      	; 0x852 <__fp_round+0xc>
 84e:	88 23       	and	r24, r24
 850:	52 f0       	brmi	.+20     	; 0x866 <__fp_round+0x20>
 852:	bb 0f       	add	r27, r27
 854:	40 f4       	brcc	.+16     	; 0x866 <__fp_round+0x20>
 856:	bf 2b       	or	r27, r31
 858:	11 f4       	brne	.+4      	; 0x85e <__fp_round+0x18>
 85a:	60 ff       	sbrs	r22, 0
 85c:	04 c0       	rjmp	.+8      	; 0x866 <__fp_round+0x20>
 85e:	6f 5f       	subi	r22, 0xFF	; 255
 860:	7f 4f       	sbci	r23, 0xFF	; 255
 862:	8f 4f       	sbci	r24, 0xFF	; 255
 864:	9f 4f       	sbci	r25, 0xFF	; 255
 866:	08 95       	ret

00000868 <__fp_split3>:
 868:	57 fd       	sbrc	r21, 7
 86a:	90 58       	subi	r25, 0x80	; 128
 86c:	44 0f       	add	r20, r20
 86e:	55 1f       	adc	r21, r21
 870:	59 f0       	breq	.+22     	; 0x888 <__fp_splitA+0x10>
 872:	5f 3f       	cpi	r21, 0xFF	; 255
 874:	71 f0       	breq	.+28     	; 0x892 <__fp_splitA+0x1a>
 876:	47 95       	ror	r20

00000878 <__fp_splitA>:
 878:	88 0f       	add	r24, r24
 87a:	97 fb       	bst	r25, 7
 87c:	99 1f       	adc	r25, r25
 87e:	61 f0       	breq	.+24     	; 0x898 <__fp_splitA+0x20>
 880:	9f 3f       	cpi	r25, 0xFF	; 255
 882:	79 f0       	breq	.+30     	; 0x8a2 <__fp_splitA+0x2a>
 884:	87 95       	ror	r24
 886:	08 95       	ret
 888:	12 16       	cp	r1, r18
 88a:	13 06       	cpc	r1, r19
 88c:	14 06       	cpc	r1, r20
 88e:	55 1f       	adc	r21, r21
 890:	f2 cf       	rjmp	.-28     	; 0x876 <__fp_split3+0xe>
 892:	46 95       	lsr	r20
 894:	f1 df       	rcall	.-30     	; 0x878 <__fp_splitA>
 896:	08 c0       	rjmp	.+16     	; 0x8a8 <__fp_splitA+0x30>
 898:	16 16       	cp	r1, r22
 89a:	17 06       	cpc	r1, r23
 89c:	18 06       	cpc	r1, r24
 89e:	99 1f       	adc	r25, r25
 8a0:	f1 cf       	rjmp	.-30     	; 0x884 <__fp_splitA+0xc>
 8a2:	86 95       	lsr	r24
 8a4:	71 05       	cpc	r23, r1
 8a6:	61 05       	cpc	r22, r1
 8a8:	08 94       	sec
 8aa:	08 95       	ret

000008ac <__fp_zero>:
 8ac:	e8 94       	clt

000008ae <__fp_szero>:
 8ae:	bb 27       	eor	r27, r27
 8b0:	66 27       	eor	r22, r22
 8b2:	77 27       	eor	r23, r23
 8b4:	cb 01       	movw	r24, r22
 8b6:	97 f9       	bld	r25, 7
 8b8:	08 95       	ret

000008ba <__gesf2>:
 8ba:	8a df       	rcall	.-236    	; 0x7d0 <__fp_cmp>
 8bc:	08 f4       	brcc	.+2      	; 0x8c0 <__gesf2+0x6>
 8be:	8f ef       	ldi	r24, 0xFF	; 255
 8c0:	08 95       	ret

000008c2 <__mulsf3>:
 8c2:	0b d0       	rcall	.+22     	; 0x8da <__mulsf3x>
 8c4:	c0 cf       	rjmp	.-128    	; 0x846 <__fp_round>
 8c6:	b1 df       	rcall	.-158    	; 0x82a <__fp_pscA>
 8c8:	28 f0       	brcs	.+10     	; 0x8d4 <__mulsf3+0x12>
 8ca:	b6 df       	rcall	.-148    	; 0x838 <__fp_pscB>
 8cc:	18 f0       	brcs	.+6      	; 0x8d4 <__mulsf3+0x12>
 8ce:	95 23       	and	r25, r21
 8d0:	09 f0       	breq	.+2      	; 0x8d4 <__mulsf3+0x12>
 8d2:	a2 cf       	rjmp	.-188    	; 0x818 <__fp_inf>
 8d4:	a7 cf       	rjmp	.-178    	; 0x824 <__fp_nan>
 8d6:	11 24       	eor	r1, r1
 8d8:	ea cf       	rjmp	.-44     	; 0x8ae <__fp_szero>

000008da <__mulsf3x>:
 8da:	c6 df       	rcall	.-116    	; 0x868 <__fp_split3>
 8dc:	a0 f3       	brcs	.-24     	; 0x8c6 <__mulsf3+0x4>

000008de <__mulsf3_pse>:
 8de:	95 9f       	mul	r25, r21
 8e0:	d1 f3       	breq	.-12     	; 0x8d6 <__mulsf3+0x14>
 8e2:	95 0f       	add	r25, r21
 8e4:	50 e0       	ldi	r21, 0x00	; 0
 8e6:	55 1f       	adc	r21, r21
 8e8:	62 9f       	mul	r22, r18
 8ea:	f0 01       	movw	r30, r0
 8ec:	72 9f       	mul	r23, r18
 8ee:	bb 27       	eor	r27, r27
 8f0:	f0 0d       	add	r31, r0
 8f2:	b1 1d       	adc	r27, r1
 8f4:	63 9f       	mul	r22, r19
 8f6:	aa 27       	eor	r26, r26
 8f8:	f0 0d       	add	r31, r0
 8fa:	b1 1d       	adc	r27, r1
 8fc:	aa 1f       	adc	r26, r26
 8fe:	64 9f       	mul	r22, r20
 900:	66 27       	eor	r22, r22
 902:	b0 0d       	add	r27, r0
 904:	a1 1d       	adc	r26, r1
 906:	66 1f       	adc	r22, r22
 908:	82 9f       	mul	r24, r18
 90a:	22 27       	eor	r18, r18
 90c:	b0 0d       	add	r27, r0
 90e:	a1 1d       	adc	r26, r1
 910:	62 1f       	adc	r22, r18
 912:	73 9f       	mul	r23, r19
 914:	b0 0d       	add	r27, r0
 916:	a1 1d       	adc	r26, r1
 918:	62 1f       	adc	r22, r18
 91a:	83 9f       	mul	r24, r19
 91c:	a0 0d       	add	r26, r0
 91e:	61 1d       	adc	r22, r1
 920:	22 1f       	adc	r18, r18
 922:	74 9f       	mul	r23, r20
 924:	33 27       	eor	r19, r19
 926:	a0 0d       	add	r26, r0
 928:	61 1d       	adc	r22, r1
 92a:	23 1f       	adc	r18, r19
 92c:	84 9f       	mul	r24, r20
 92e:	60 0d       	add	r22, r0
 930:	21 1d       	adc	r18, r1
 932:	82 2f       	mov	r24, r18
 934:	76 2f       	mov	r23, r22
 936:	6a 2f       	mov	r22, r26
 938:	11 24       	eor	r1, r1
 93a:	9f 57       	subi	r25, 0x7F	; 127
 93c:	50 40       	sbci	r21, 0x00	; 0
 93e:	8a f0       	brmi	.+34     	; 0x962 <__mulsf3_pse+0x84>
 940:	e1 f0       	breq	.+56     	; 0x97a <__mulsf3_pse+0x9c>
 942:	88 23       	and	r24, r24
 944:	4a f0       	brmi	.+18     	; 0x958 <__mulsf3_pse+0x7a>
 946:	ee 0f       	add	r30, r30
 948:	ff 1f       	adc	r31, r31
 94a:	bb 1f       	adc	r27, r27
 94c:	66 1f       	adc	r22, r22
 94e:	77 1f       	adc	r23, r23
 950:	88 1f       	adc	r24, r24
 952:	91 50       	subi	r25, 0x01	; 1
 954:	50 40       	sbci	r21, 0x00	; 0
 956:	a9 f7       	brne	.-22     	; 0x942 <__mulsf3_pse+0x64>
 958:	9e 3f       	cpi	r25, 0xFE	; 254
 95a:	51 05       	cpc	r21, r1
 95c:	70 f0       	brcs	.+28     	; 0x97a <__mulsf3_pse+0x9c>
 95e:	5c cf       	rjmp	.-328    	; 0x818 <__fp_inf>
 960:	a6 cf       	rjmp	.-180    	; 0x8ae <__fp_szero>
 962:	5f 3f       	cpi	r21, 0xFF	; 255
 964:	ec f3       	brlt	.-6      	; 0x960 <__mulsf3_pse+0x82>
 966:	98 3e       	cpi	r25, 0xE8	; 232
 968:	dc f3       	brlt	.-10     	; 0x960 <__mulsf3_pse+0x82>
 96a:	86 95       	lsr	r24
 96c:	77 95       	ror	r23
 96e:	67 95       	ror	r22
 970:	b7 95       	ror	r27
 972:	f7 95       	ror	r31
 974:	e7 95       	ror	r30
 976:	9f 5f       	subi	r25, 0xFF	; 255
 978:	c1 f7       	brne	.-16     	; 0x96a <__mulsf3_pse+0x8c>
 97a:	fe 2b       	or	r31, r30
 97c:	88 0f       	add	r24, r24
 97e:	91 1d       	adc	r25, r1
 980:	96 95       	lsr	r25
 982:	87 95       	ror	r24
 984:	97 f9       	bld	r25, 7
 986:	08 95       	ret

00000988 <pow>:
 988:	fa 01       	movw	r30, r20
 98a:	ee 0f       	add	r30, r30
 98c:	ff 1f       	adc	r31, r31
 98e:	30 96       	adiw	r30, 0x00	; 0
 990:	21 05       	cpc	r18, r1
 992:	31 05       	cpc	r19, r1
 994:	99 f1       	breq	.+102    	; 0x9fc <pow+0x74>
 996:	61 15       	cp	r22, r1
 998:	71 05       	cpc	r23, r1
 99a:	61 f4       	brne	.+24     	; 0x9b4 <pow+0x2c>
 99c:	80 38       	cpi	r24, 0x80	; 128
 99e:	bf e3       	ldi	r27, 0x3F	; 63
 9a0:	9b 07       	cpc	r25, r27
 9a2:	49 f1       	breq	.+82     	; 0x9f6 <pow+0x6e>
 9a4:	68 94       	set
 9a6:	90 38       	cpi	r25, 0x80	; 128
 9a8:	81 05       	cpc	r24, r1
 9aa:	61 f0       	breq	.+24     	; 0x9c4 <pow+0x3c>
 9ac:	80 38       	cpi	r24, 0x80	; 128
 9ae:	bf ef       	ldi	r27, 0xFF	; 255
 9b0:	9b 07       	cpc	r25, r27
 9b2:	41 f0       	breq	.+16     	; 0x9c4 <pow+0x3c>
 9b4:	99 23       	and	r25, r25
 9b6:	42 f5       	brpl	.+80     	; 0xa08 <pow+0x80>
 9b8:	ff 3f       	cpi	r31, 0xFF	; 255
 9ba:	e1 05       	cpc	r30, r1
 9bc:	31 05       	cpc	r19, r1
 9be:	21 05       	cpc	r18, r1
 9c0:	11 f1       	breq	.+68     	; 0xa06 <pow+0x7e>
 9c2:	e8 94       	clt
 9c4:	08 94       	sec
 9c6:	e7 95       	ror	r30
 9c8:	d9 01       	movw	r26, r18
 9ca:	aa 23       	and	r26, r26
 9cc:	29 f4       	brne	.+10     	; 0x9d8 <pow+0x50>
 9ce:	ab 2f       	mov	r26, r27
 9d0:	be 2f       	mov	r27, r30
 9d2:	f8 5f       	subi	r31, 0xF8	; 248
 9d4:	d0 f3       	brcs	.-12     	; 0x9ca <pow+0x42>
 9d6:	10 c0       	rjmp	.+32     	; 0x9f8 <pow+0x70>
 9d8:	ff 5f       	subi	r31, 0xFF	; 255
 9da:	70 f4       	brcc	.+28     	; 0x9f8 <pow+0x70>
 9dc:	a6 95       	lsr	r26
 9de:	e0 f7       	brcc	.-8      	; 0x9d8 <pow+0x50>
 9e0:	f7 39       	cpi	r31, 0x97	; 151
 9e2:	50 f0       	brcs	.+20     	; 0x9f8 <pow+0x70>
 9e4:	19 f0       	breq	.+6      	; 0x9ec <pow+0x64>
 9e6:	ff 3a       	cpi	r31, 0xAF	; 175
 9e8:	38 f4       	brcc	.+14     	; 0x9f8 <pow+0x70>
 9ea:	9f 77       	andi	r25, 0x7F	; 127
 9ec:	9f 93       	push	r25
 9ee:	0c d0       	rcall	.+24     	; 0xa08 <pow+0x80>
 9f0:	0f 90       	pop	r0
 9f2:	07 fc       	sbrc	r0, 7
 9f4:	90 58       	subi	r25, 0x80	; 128
 9f6:	08 95       	ret
 9f8:	3e f0       	brts	.+14     	; 0xa08 <pow+0x80>
 9fa:	14 cf       	rjmp	.-472    	; 0x824 <__fp_nan>
 9fc:	60 e0       	ldi	r22, 0x00	; 0
 9fe:	70 e0       	ldi	r23, 0x00	; 0
 a00:	80 e8       	ldi	r24, 0x80	; 128
 a02:	9f e3       	ldi	r25, 0x3F	; 63
 a04:	08 95       	ret
 a06:	4f e7       	ldi	r20, 0x7F	; 127
 a08:	9f 77       	andi	r25, 0x7F	; 127
 a0a:	5f 93       	push	r21
 a0c:	4f 93       	push	r20
 a0e:	3f 93       	push	r19
 a10:	2f 93       	push	r18
 a12:	9e d0       	rcall	.+316    	; 0xb50 <log>
 a14:	2f 91       	pop	r18
 a16:	3f 91       	pop	r19
 a18:	4f 91       	pop	r20
 a1a:	5f 91       	pop	r21
 a1c:	52 df       	rcall	.-348    	; 0x8c2 <__mulsf3>
 a1e:	05 c0       	rjmp	.+10     	; 0xa2a <exp>
 a20:	19 f4       	brne	.+6      	; 0xa28 <pow+0xa0>
 a22:	0e f0       	brts	.+2      	; 0xa26 <pow+0x9e>
 a24:	f9 ce       	rjmp	.-526    	; 0x818 <__fp_inf>
 a26:	42 cf       	rjmp	.-380    	; 0x8ac <__fp_zero>
 a28:	fd ce       	rjmp	.-518    	; 0x824 <__fp_nan>

00000a2a <exp>:
 a2a:	26 df       	rcall	.-436    	; 0x878 <__fp_splitA>
 a2c:	c8 f3       	brcs	.-14     	; 0xa20 <pow+0x98>
 a2e:	96 38       	cpi	r25, 0x86	; 134
 a30:	c0 f7       	brcc	.-16     	; 0xa22 <pow+0x9a>
 a32:	07 f8       	bld	r0, 7
 a34:	0f 92       	push	r0
 a36:	e8 94       	clt
 a38:	2b e3       	ldi	r18, 0x3B	; 59
 a3a:	3a ea       	ldi	r19, 0xAA	; 170
 a3c:	48 eb       	ldi	r20, 0xB8	; 184
 a3e:	5f e7       	ldi	r21, 0x7F	; 127
 a40:	4e df       	rcall	.-356    	; 0x8de <__mulsf3_pse>
 a42:	0f 92       	push	r0
 a44:	0f 92       	push	r0
 a46:	0f 92       	push	r0
 a48:	4d b7       	in	r20, 0x3d	; 61
 a4a:	5e b7       	in	r21, 0x3e	; 62
 a4c:	0f 92       	push	r0
 a4e:	c0 d0       	rcall	.+384    	; 0xbd0 <modf>
 a50:	e8 ef       	ldi	r30, 0xF8	; 248
 a52:	f0 e0       	ldi	r31, 0x00	; 0
 a54:	16 d0       	rcall	.+44     	; 0xa82 <__fp_powser>
 a56:	4f 91       	pop	r20
 a58:	5f 91       	pop	r21
 a5a:	ef 91       	pop	r30
 a5c:	ff 91       	pop	r31
 a5e:	e5 95       	asr	r30
 a60:	ee 1f       	adc	r30, r30
 a62:	ff 1f       	adc	r31, r31
 a64:	49 f0       	breq	.+18     	; 0xa78 <exp+0x4e>
 a66:	fe 57       	subi	r31, 0x7E	; 126
 a68:	e0 68       	ori	r30, 0x80	; 128
 a6a:	44 27       	eor	r20, r20
 a6c:	ee 0f       	add	r30, r30
 a6e:	44 1f       	adc	r20, r20
 a70:	fa 95       	dec	r31
 a72:	e1 f7       	brne	.-8      	; 0xa6c <exp+0x42>
 a74:	41 95       	neg	r20
 a76:	55 0b       	sbc	r21, r21
 a78:	32 d0       	rcall	.+100    	; 0xade <ldexp>
 a7a:	0f 90       	pop	r0
 a7c:	07 fe       	sbrs	r0, 7
 a7e:	26 c0       	rjmp	.+76     	; 0xacc <inverse>
 a80:	08 95       	ret

00000a82 <__fp_powser>:
 a82:	df 93       	push	r29
 a84:	cf 93       	push	r28
 a86:	1f 93       	push	r17
 a88:	0f 93       	push	r16
 a8a:	ff 92       	push	r15
 a8c:	ef 92       	push	r14
 a8e:	df 92       	push	r13
 a90:	7b 01       	movw	r14, r22
 a92:	8c 01       	movw	r16, r24
 a94:	68 94       	set
 a96:	05 c0       	rjmp	.+10     	; 0xaa2 <__fp_powser+0x20>
 a98:	da 2e       	mov	r13, r26
 a9a:	ef 01       	movw	r28, r30
 a9c:	1e df       	rcall	.-452    	; 0x8da <__mulsf3x>
 a9e:	fe 01       	movw	r30, r28
 aa0:	e8 94       	clt
 aa2:	a5 91       	lpm	r26, Z+
 aa4:	25 91       	lpm	r18, Z+
 aa6:	35 91       	lpm	r19, Z+
 aa8:	45 91       	lpm	r20, Z+
 aaa:	55 91       	lpm	r21, Z+
 aac:	ae f3       	brts	.-22     	; 0xa98 <__fp_powser+0x16>
 aae:	ef 01       	movw	r28, r30
 ab0:	d4 d0       	rcall	.+424    	; 0xc5a <__addsf3x>
 ab2:	fe 01       	movw	r30, r28
 ab4:	97 01       	movw	r18, r14
 ab6:	a8 01       	movw	r20, r16
 ab8:	da 94       	dec	r13
 aba:	79 f7       	brne	.-34     	; 0xa9a <__fp_powser+0x18>
 abc:	df 90       	pop	r13
 abe:	ef 90       	pop	r14
 ac0:	ff 90       	pop	r15
 ac2:	0f 91       	pop	r16
 ac4:	1f 91       	pop	r17
 ac6:	cf 91       	pop	r28
 ac8:	df 91       	pop	r29
 aca:	08 95       	ret

00000acc <inverse>:
 acc:	9b 01       	movw	r18, r22
 ace:	ac 01       	movw	r20, r24
 ad0:	60 e0       	ldi	r22, 0x00	; 0
 ad2:	70 e0       	ldi	r23, 0x00	; 0
 ad4:	80 e8       	ldi	r24, 0x80	; 128
 ad6:	9f e3       	ldi	r25, 0x3F	; 63
 ad8:	aa cd       	rjmp	.-1196   	; 0x62e <__divsf3>
 ada:	9e ce       	rjmp	.-708    	; 0x818 <__fp_inf>
 adc:	11 c1       	rjmp	.+546    	; 0xd00 <__fp_mpack>

00000ade <ldexp>:
 ade:	cc de       	rcall	.-616    	; 0x878 <__fp_splitA>
 ae0:	e8 f3       	brcs	.-6      	; 0xadc <inverse+0x10>
 ae2:	99 23       	and	r25, r25
 ae4:	d9 f3       	breq	.-10     	; 0xadc <inverse+0x10>
 ae6:	94 0f       	add	r25, r20
 ae8:	51 1d       	adc	r21, r1
 aea:	bb f3       	brvs	.-18     	; 0xada <inverse+0xe>
 aec:	91 50       	subi	r25, 0x01	; 1
 aee:	50 40       	sbci	r21, 0x00	; 0
 af0:	94 f0       	brlt	.+36     	; 0xb16 <ldexp+0x38>
 af2:	59 f0       	breq	.+22     	; 0xb0a <ldexp+0x2c>
 af4:	88 23       	and	r24, r24
 af6:	32 f0       	brmi	.+12     	; 0xb04 <ldexp+0x26>
 af8:	66 0f       	add	r22, r22
 afa:	77 1f       	adc	r23, r23
 afc:	88 1f       	adc	r24, r24
 afe:	91 50       	subi	r25, 0x01	; 1
 b00:	50 40       	sbci	r21, 0x00	; 0
 b02:	c1 f7       	brne	.-16     	; 0xaf4 <ldexp+0x16>
 b04:	9e 3f       	cpi	r25, 0xFE	; 254
 b06:	51 05       	cpc	r21, r1
 b08:	44 f7       	brge	.-48     	; 0xada <inverse+0xe>
 b0a:	88 0f       	add	r24, r24
 b0c:	91 1d       	adc	r25, r1
 b0e:	96 95       	lsr	r25
 b10:	87 95       	ror	r24
 b12:	97 f9       	bld	r25, 7
 b14:	08 95       	ret
 b16:	5f 3f       	cpi	r21, 0xFF	; 255
 b18:	ac f0       	brlt	.+42     	; 0xb44 <ldexp+0x66>
 b1a:	98 3e       	cpi	r25, 0xE8	; 232
 b1c:	9c f0       	brlt	.+38     	; 0xb44 <ldexp+0x66>
 b1e:	bb 27       	eor	r27, r27
 b20:	86 95       	lsr	r24
 b22:	77 95       	ror	r23
 b24:	67 95       	ror	r22
 b26:	b7 95       	ror	r27
 b28:	08 f4       	brcc	.+2      	; 0xb2c <ldexp+0x4e>
 b2a:	b1 60       	ori	r27, 0x01	; 1
 b2c:	93 95       	inc	r25
 b2e:	c1 f7       	brne	.-16     	; 0xb20 <ldexp+0x42>
 b30:	bb 0f       	add	r27, r27
 b32:	58 f7       	brcc	.-42     	; 0xb0a <ldexp+0x2c>
 b34:	11 f4       	brne	.+4      	; 0xb3a <ldexp+0x5c>
 b36:	60 ff       	sbrs	r22, 0
 b38:	e8 cf       	rjmp	.-48     	; 0xb0a <ldexp+0x2c>
 b3a:	6f 5f       	subi	r22, 0xFF	; 255
 b3c:	7f 4f       	sbci	r23, 0xFF	; 255
 b3e:	8f 4f       	sbci	r24, 0xFF	; 255
 b40:	9f 4f       	sbci	r25, 0xFF	; 255
 b42:	e3 cf       	rjmp	.-58     	; 0xb0a <ldexp+0x2c>
 b44:	b4 ce       	rjmp	.-664    	; 0x8ae <__fp_szero>
 b46:	0e f0       	brts	.+2      	; 0xb4a <ldexp+0x6c>
 b48:	db c0       	rjmp	.+438    	; 0xd00 <__fp_mpack>
 b4a:	6c ce       	rjmp	.-808    	; 0x824 <__fp_nan>
 b4c:	68 94       	set
 b4e:	64 ce       	rjmp	.-824    	; 0x818 <__fp_inf>

00000b50 <log>:
 b50:	93 de       	rcall	.-730    	; 0x878 <__fp_splitA>
 b52:	c8 f3       	brcs	.-14     	; 0xb46 <ldexp+0x68>
 b54:	99 23       	and	r25, r25
 b56:	d1 f3       	breq	.-12     	; 0xb4c <ldexp+0x6e>
 b58:	c6 f3       	brts	.-16     	; 0xb4a <ldexp+0x6c>
 b5a:	df 93       	push	r29
 b5c:	cf 93       	push	r28
 b5e:	1f 93       	push	r17
 b60:	0f 93       	push	r16
 b62:	ff 92       	push	r15
 b64:	c9 2f       	mov	r28, r25
 b66:	dd 27       	eor	r29, r29
 b68:	88 23       	and	r24, r24
 b6a:	2a f0       	brmi	.+10     	; 0xb76 <log+0x26>
 b6c:	21 97       	sbiw	r28, 0x01	; 1
 b6e:	66 0f       	add	r22, r22
 b70:	77 1f       	adc	r23, r23
 b72:	88 1f       	adc	r24, r24
 b74:	da f7       	brpl	.-10     	; 0xb6c <log+0x1c>
 b76:	20 e0       	ldi	r18, 0x00	; 0
 b78:	30 e0       	ldi	r19, 0x00	; 0
 b7a:	40 e8       	ldi	r20, 0x80	; 128
 b7c:	5f eb       	ldi	r21, 0xBF	; 191
 b7e:	9f e3       	ldi	r25, 0x3F	; 63
 b80:	88 39       	cpi	r24, 0x98	; 152
 b82:	20 f0       	brcs	.+8      	; 0xb8c <log+0x3c>
 b84:	80 3e       	cpi	r24, 0xE0	; 224
 b86:	30 f0       	brcs	.+12     	; 0xb94 <log+0x44>
 b88:	21 96       	adiw	r28, 0x01	; 1
 b8a:	8f 77       	andi	r24, 0x7F	; 127
 b8c:	55 d0       	rcall	.+170    	; 0xc38 <__addsf3>
 b8e:	e0 e2       	ldi	r30, 0x20	; 32
 b90:	f1 e0       	ldi	r31, 0x01	; 1
 b92:	03 c0       	rjmp	.+6      	; 0xb9a <log+0x4a>
 b94:	51 d0       	rcall	.+162    	; 0xc38 <__addsf3>
 b96:	ed e4       	ldi	r30, 0x4D	; 77
 b98:	f1 e0       	ldi	r31, 0x01	; 1
 b9a:	73 df       	rcall	.-282    	; 0xa82 <__fp_powser>
 b9c:	8b 01       	movw	r16, r22
 b9e:	be 01       	movw	r22, r28
 ba0:	ec 01       	movw	r28, r24
 ba2:	fb 2e       	mov	r15, r27
 ba4:	6f 57       	subi	r22, 0x7F	; 127
 ba6:	71 09       	sbc	r23, r1
 ba8:	75 95       	asr	r23
 baa:	77 1f       	adc	r23, r23
 bac:	88 0b       	sbc	r24, r24
 bae:	99 0b       	sbc	r25, r25
 bb0:	d4 dd       	rcall	.-1112   	; 0x75a <__floatsisf>
 bb2:	28 e1       	ldi	r18, 0x18	; 24
 bb4:	32 e7       	ldi	r19, 0x72	; 114
 bb6:	41 e3       	ldi	r20, 0x31	; 49
 bb8:	5f e3       	ldi	r21, 0x3F	; 63
 bba:	8f de       	rcall	.-738    	; 0x8da <__mulsf3x>
 bbc:	af 2d       	mov	r26, r15
 bbe:	98 01       	movw	r18, r16
 bc0:	ae 01       	movw	r20, r28
 bc2:	ff 90       	pop	r15
 bc4:	0f 91       	pop	r16
 bc6:	1f 91       	pop	r17
 bc8:	cf 91       	pop	r28
 bca:	df 91       	pop	r29
 bcc:	46 d0       	rcall	.+140    	; 0xc5a <__addsf3x>
 bce:	3b ce       	rjmp	.-906    	; 0x846 <__fp_round>

00000bd0 <modf>:
 bd0:	fa 01       	movw	r30, r20
 bd2:	dc 01       	movw	r26, r24
 bd4:	aa 0f       	add	r26, r26
 bd6:	bb 1f       	adc	r27, r27
 bd8:	9b 01       	movw	r18, r22
 bda:	ac 01       	movw	r20, r24
 bdc:	bf 57       	subi	r27, 0x7F	; 127
 bde:	28 f4       	brcc	.+10     	; 0xbea <modf+0x1a>
 be0:	22 27       	eor	r18, r18
 be2:	33 27       	eor	r19, r19
 be4:	44 27       	eor	r20, r20
 be6:	50 78       	andi	r21, 0x80	; 128
 be8:	1f c0       	rjmp	.+62     	; 0xc28 <modf+0x58>
 bea:	b7 51       	subi	r27, 0x17	; 23
 bec:	88 f4       	brcc	.+34     	; 0xc10 <modf+0x40>
 bee:	ab 2f       	mov	r26, r27
 bf0:	00 24       	eor	r0, r0
 bf2:	46 95       	lsr	r20
 bf4:	37 95       	ror	r19
 bf6:	27 95       	ror	r18
 bf8:	01 1c       	adc	r0, r1
 bfa:	a3 95       	inc	r26
 bfc:	d2 f3       	brmi	.-12     	; 0xbf2 <modf+0x22>
 bfe:	00 20       	and	r0, r0
 c00:	69 f0       	breq	.+26     	; 0xc1c <modf+0x4c>
 c02:	22 0f       	add	r18, r18
 c04:	33 1f       	adc	r19, r19
 c06:	44 1f       	adc	r20, r20
 c08:	b3 95       	inc	r27
 c0a:	da f3       	brmi	.-10     	; 0xc02 <modf+0x32>
 c0c:	0d d0       	rcall	.+26     	; 0xc28 <modf+0x58>
 c0e:	13 c0       	rjmp	.+38     	; 0xc36 <__subsf3>
 c10:	61 30       	cpi	r22, 0x01	; 1
 c12:	71 05       	cpc	r23, r1
 c14:	a0 e8       	ldi	r26, 0x80	; 128
 c16:	8a 07       	cpc	r24, r26
 c18:	b9 46       	sbci	r27, 0x69	; 105
 c1a:	30 f4       	brcc	.+12     	; 0xc28 <modf+0x58>
 c1c:	9b 01       	movw	r18, r22
 c1e:	ac 01       	movw	r20, r24
 c20:	66 27       	eor	r22, r22
 c22:	77 27       	eor	r23, r23
 c24:	88 27       	eor	r24, r24
 c26:	90 78       	andi	r25, 0x80	; 128
 c28:	30 96       	adiw	r30, 0x00	; 0
 c2a:	21 f0       	breq	.+8      	; 0xc34 <modf+0x64>
 c2c:	20 83       	st	Z, r18
 c2e:	31 83       	std	Z+1, r19	; 0x01
 c30:	42 83       	std	Z+2, r20	; 0x02
 c32:	53 83       	std	Z+3, r21	; 0x03
 c34:	08 95       	ret

00000c36 <__subsf3>:
 c36:	50 58       	subi	r21, 0x80	; 128

00000c38 <__addsf3>:
 c38:	bb 27       	eor	r27, r27
 c3a:	aa 27       	eor	r26, r26
 c3c:	0e d0       	rcall	.+28     	; 0xc5a <__addsf3x>
 c3e:	03 ce       	rjmp	.-1018   	; 0x846 <__fp_round>
 c40:	f4 dd       	rcall	.-1048   	; 0x82a <__fp_pscA>
 c42:	30 f0       	brcs	.+12     	; 0xc50 <__addsf3+0x18>
 c44:	f9 dd       	rcall	.-1038   	; 0x838 <__fp_pscB>
 c46:	20 f0       	brcs	.+8      	; 0xc50 <__addsf3+0x18>
 c48:	31 f4       	brne	.+12     	; 0xc56 <__addsf3+0x1e>
 c4a:	9f 3f       	cpi	r25, 0xFF	; 255
 c4c:	11 f4       	brne	.+4      	; 0xc52 <__addsf3+0x1a>
 c4e:	1e f4       	brtc	.+6      	; 0xc56 <__addsf3+0x1e>
 c50:	e9 cd       	rjmp	.-1070   	; 0x824 <__fp_nan>
 c52:	0e f4       	brtc	.+2      	; 0xc56 <__addsf3+0x1e>
 c54:	e0 95       	com	r30
 c56:	e7 fb       	bst	r30, 7
 c58:	df cd       	rjmp	.-1090   	; 0x818 <__fp_inf>

00000c5a <__addsf3x>:
 c5a:	e9 2f       	mov	r30, r25
 c5c:	05 de       	rcall	.-1014   	; 0x868 <__fp_split3>
 c5e:	80 f3       	brcs	.-32     	; 0xc40 <__addsf3+0x8>
 c60:	ba 17       	cp	r27, r26
 c62:	62 07       	cpc	r22, r18
 c64:	73 07       	cpc	r23, r19
 c66:	84 07       	cpc	r24, r20
 c68:	95 07       	cpc	r25, r21
 c6a:	18 f0       	brcs	.+6      	; 0xc72 <__addsf3x+0x18>
 c6c:	71 f4       	brne	.+28     	; 0xc8a <__addsf3x+0x30>
 c6e:	9e f5       	brtc	.+102    	; 0xcd6 <__addsf3x+0x7c>
 c70:	1d ce       	rjmp	.-966    	; 0x8ac <__fp_zero>
 c72:	0e f4       	brtc	.+2      	; 0xc76 <__addsf3x+0x1c>
 c74:	e0 95       	com	r30
 c76:	0b 2e       	mov	r0, r27
 c78:	ba 2f       	mov	r27, r26
 c7a:	a0 2d       	mov	r26, r0
 c7c:	0b 01       	movw	r0, r22
 c7e:	b9 01       	movw	r22, r18
 c80:	90 01       	movw	r18, r0
 c82:	0c 01       	movw	r0, r24
 c84:	ca 01       	movw	r24, r20
 c86:	a0 01       	movw	r20, r0
 c88:	11 24       	eor	r1, r1
 c8a:	ff 27       	eor	r31, r31
 c8c:	59 1b       	sub	r21, r25
 c8e:	99 f0       	breq	.+38     	; 0xcb6 <__addsf3x+0x5c>
 c90:	59 3f       	cpi	r21, 0xF9	; 249
 c92:	50 f4       	brcc	.+20     	; 0xca8 <__addsf3x+0x4e>
 c94:	50 3e       	cpi	r21, 0xE0	; 224
 c96:	68 f1       	brcs	.+90     	; 0xcf2 <__addsf3x+0x98>
 c98:	1a 16       	cp	r1, r26
 c9a:	f0 40       	sbci	r31, 0x00	; 0
 c9c:	a2 2f       	mov	r26, r18
 c9e:	23 2f       	mov	r18, r19
 ca0:	34 2f       	mov	r19, r20
 ca2:	44 27       	eor	r20, r20
 ca4:	58 5f       	subi	r21, 0xF8	; 248
 ca6:	f3 cf       	rjmp	.-26     	; 0xc8e <__addsf3x+0x34>
 ca8:	46 95       	lsr	r20
 caa:	37 95       	ror	r19
 cac:	27 95       	ror	r18
 cae:	a7 95       	ror	r26
 cb0:	f0 40       	sbci	r31, 0x00	; 0
 cb2:	53 95       	inc	r21
 cb4:	c9 f7       	brne	.-14     	; 0xca8 <__addsf3x+0x4e>
 cb6:	7e f4       	brtc	.+30     	; 0xcd6 <__addsf3x+0x7c>
 cb8:	1f 16       	cp	r1, r31
 cba:	ba 0b       	sbc	r27, r26
 cbc:	62 0b       	sbc	r22, r18
 cbe:	73 0b       	sbc	r23, r19
 cc0:	84 0b       	sbc	r24, r20
 cc2:	ba f0       	brmi	.+46     	; 0xcf2 <__addsf3x+0x98>
 cc4:	91 50       	subi	r25, 0x01	; 1
 cc6:	a1 f0       	breq	.+40     	; 0xcf0 <__addsf3x+0x96>
 cc8:	ff 0f       	add	r31, r31
 cca:	bb 1f       	adc	r27, r27
 ccc:	66 1f       	adc	r22, r22
 cce:	77 1f       	adc	r23, r23
 cd0:	88 1f       	adc	r24, r24
 cd2:	c2 f7       	brpl	.-16     	; 0xcc4 <__addsf3x+0x6a>
 cd4:	0e c0       	rjmp	.+28     	; 0xcf2 <__addsf3x+0x98>
 cd6:	ba 0f       	add	r27, r26
 cd8:	62 1f       	adc	r22, r18
 cda:	73 1f       	adc	r23, r19
 cdc:	84 1f       	adc	r24, r20
 cde:	48 f4       	brcc	.+18     	; 0xcf2 <__addsf3x+0x98>
 ce0:	87 95       	ror	r24
 ce2:	77 95       	ror	r23
 ce4:	67 95       	ror	r22
 ce6:	b7 95       	ror	r27
 ce8:	f7 95       	ror	r31
 cea:	9e 3f       	cpi	r25, 0xFE	; 254
 cec:	08 f0       	brcs	.+2      	; 0xcf0 <__addsf3x+0x96>
 cee:	b3 cf       	rjmp	.-154    	; 0xc56 <__addsf3+0x1e>
 cf0:	93 95       	inc	r25
 cf2:	88 0f       	add	r24, r24
 cf4:	08 f0       	brcs	.+2      	; 0xcf8 <__addsf3x+0x9e>
 cf6:	99 27       	eor	r25, r25
 cf8:	ee 0f       	add	r30, r30
 cfa:	97 95       	ror	r25
 cfc:	87 95       	ror	r24
 cfe:	08 95       	ret

00000d00 <__fp_mpack>:
 d00:	9f 3f       	cpi	r25, 0xFF	; 255
 d02:	31 f0       	breq	.+12     	; 0xd10 <__fp_mpack_finite+0xc>

00000d04 <__fp_mpack_finite>:
 d04:	91 50       	subi	r25, 0x01	; 1
 d06:	20 f4       	brcc	.+8      	; 0xd10 <__fp_mpack_finite+0xc>
 d08:	87 95       	ror	r24
 d0a:	77 95       	ror	r23
 d0c:	67 95       	ror	r22
 d0e:	b7 95       	ror	r27
 d10:	88 0f       	add	r24, r24
 d12:	91 1d       	adc	r25, r1
 d14:	96 95       	lsr	r25
 d16:	87 95       	ror	r24
 d18:	97 f9       	bld	r25, 7
 d1a:	08 95       	ret

00000d1c <__tablejump2__>:
 d1c:	ee 0f       	add	r30, r30
 d1e:	ff 1f       	adc	r31, r31
 d20:	88 1f       	adc	r24, r24
 d22:	8b bf       	out	0x3b, r24	; 59
 d24:	07 90       	elpm	r0, Z+
 d26:	f6 91       	elpm	r31, Z
 d28:	e0 2d       	mov	r30, r0
 d2a:	19 94       	eijmp

00000d2c <_exit>:
 d2c:	f8 94       	cli

00000d2e <__stop_program>:
 d2e:	ff cf       	rjmp	.-2      	; 0xd2e <__stop_program>
