
Stoppuhr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000db2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d3e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  00000db2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000db2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000de4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e58  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c84  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000527  00000000  00000000  00002920  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00002e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005da  00000000  00000000  00002ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000153  00000000  00000000  000034ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	bc c0       	rjmp	.+376    	; 0x17a <__ctors_end>
   2:	00 00       	nop
   4:	cc c0       	rjmp	.+408    	; 0x19e <__bad_interrupt>
   6:	00 00       	nop
   8:	ca c0       	rjmp	.+404    	; 0x19e <__bad_interrupt>
   a:	00 00       	nop
   c:	c8 c0       	rjmp	.+400    	; 0x19e <__bad_interrupt>
   e:	00 00       	nop
  10:	c6 c0       	rjmp	.+396    	; 0x19e <__bad_interrupt>
  12:	00 00       	nop
  14:	c4 c0       	rjmp	.+392    	; 0x19e <__bad_interrupt>
  16:	00 00       	nop
  18:	c2 c0       	rjmp	.+388    	; 0x19e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c0 c0       	rjmp	.+384    	; 0x19e <__bad_interrupt>
  1e:	00 00       	nop
  20:	be c0       	rjmp	.+380    	; 0x19e <__bad_interrupt>
  22:	00 00       	nop
  24:	bc c0       	rjmp	.+376    	; 0x19e <__bad_interrupt>
  26:	00 00       	nop
  28:	ba c0       	rjmp	.+372    	; 0x19e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	b8 c0       	rjmp	.+368    	; 0x19e <__bad_interrupt>
  2e:	00 00       	nop
  30:	b6 c0       	rjmp	.+364    	; 0x19e <__bad_interrupt>
  32:	00 00       	nop
  34:	b4 c0       	rjmp	.+360    	; 0x19e <__bad_interrupt>
  36:	00 00       	nop
  38:	b2 c0       	rjmp	.+356    	; 0x19e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b0 c0       	rjmp	.+352    	; 0x19e <__bad_interrupt>
  3e:	00 00       	nop
  40:	ae c0       	rjmp	.+348    	; 0x19e <__bad_interrupt>
  42:	00 00       	nop
  44:	ac c0       	rjmp	.+344    	; 0x19e <__bad_interrupt>
  46:	00 00       	nop
  48:	aa c0       	rjmp	.+340    	; 0x19e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a8 c0       	rjmp	.+336    	; 0x19e <__bad_interrupt>
  4e:	00 00       	nop
  50:	a6 c0       	rjmp	.+332    	; 0x19e <__bad_interrupt>
  52:	00 00       	nop
  54:	a4 c0       	rjmp	.+328    	; 0x19e <__bad_interrupt>
  56:	00 00       	nop
  58:	a2 c0       	rjmp	.+324    	; 0x19e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a0 c0       	rjmp	.+320    	; 0x19e <__bad_interrupt>
  5e:	00 00       	nop
  60:	9e c0       	rjmp	.+316    	; 0x19e <__bad_interrupt>
  62:	00 00       	nop
  64:	9c c0       	rjmp	.+312    	; 0x19e <__bad_interrupt>
  66:	00 00       	nop
  68:	9a c0       	rjmp	.+308    	; 0x19e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	98 c0       	rjmp	.+304    	; 0x19e <__bad_interrupt>
  6e:	00 00       	nop
  70:	96 c0       	rjmp	.+300    	; 0x19e <__bad_interrupt>
  72:	00 00       	nop
  74:	94 c0       	rjmp	.+296    	; 0x19e <__bad_interrupt>
  76:	00 00       	nop
  78:	92 c0       	rjmp	.+292    	; 0x19e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	90 c0       	rjmp	.+288    	; 0x19e <__bad_interrupt>
  7e:	00 00       	nop
  80:	8e c0       	rjmp	.+284    	; 0x19e <__bad_interrupt>
  82:	00 00       	nop
  84:	8c c0       	rjmp	.+280    	; 0x19e <__bad_interrupt>
  86:	00 00       	nop
  88:	8a c0       	rjmp	.+276    	; 0x19e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	88 c0       	rjmp	.+272    	; 0x19e <__bad_interrupt>
  8e:	00 00       	nop
  90:	86 c0       	rjmp	.+268    	; 0x19e <__bad_interrupt>
  92:	00 00       	nop
  94:	84 c0       	rjmp	.+264    	; 0x19e <__bad_interrupt>
  96:	00 00       	nop
  98:	82 c0       	rjmp	.+260    	; 0x19e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	80 c0       	rjmp	.+256    	; 0x19e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	7e c0       	rjmp	.+252    	; 0x19e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	7c c0       	rjmp	.+248    	; 0x19e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	7a c0       	rjmp	.+244    	; 0x19e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	78 c0       	rjmp	.+240    	; 0x19e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	76 c0       	rjmp	.+236    	; 0x19e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	74 c0       	rjmp	.+232    	; 0x19e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	72 c0       	rjmp	.+228    	; 0x19e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	70 c0       	rjmp	.+224    	; 0x19e <__bad_interrupt>
  be:	00 00       	nop
  c0:	6e c0       	rjmp	.+220    	; 0x19e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	6c c0       	rjmp	.+216    	; 0x19e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	6a c0       	rjmp	.+212    	; 0x19e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	68 c0       	rjmp	.+208    	; 0x19e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	66 c0       	rjmp	.+204    	; 0x19e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	64 c0       	rjmp	.+200    	; 0x19e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	62 c0       	rjmp	.+196    	; 0x19e <__bad_interrupt>
  da:	00 00       	nop
  dc:	60 c0       	rjmp	.+192    	; 0x19e <__bad_interrupt>
  de:	00 00       	nop
  e0:	5e c0       	rjmp	.+188    	; 0x19e <__bad_interrupt>
  e2:	00 00       	nop
  e4:	cc 02       	muls	r28, r28
  e6:	ce 02       	muls	r28, r30
  e8:	d0 02       	muls	r29, r16
  ea:	d2 02       	muls	r29, r18
  ec:	d4 02       	muls	r29, r20
  ee:	d6 02       	muls	r29, r22
  f0:	d8 02       	muls	r29, r24
  f2:	da 02       	muls	r29, r26
  f4:	dc 02       	muls	r29, r28
  f6:	de 02       	muls	r29, r30
  f8:	07 63       	ori	r16, 0x37	; 55
  fa:	42 36       	cpi	r20, 0x62	; 98
  fc:	b7 9b       	sbis	0x16, 7	; 22
  fe:	d8 a7       	std	Y+40, r29	; 0x28
 100:	1a 39       	cpi	r17, 0x9A	; 154
 102:	68 56       	subi	r22, 0x68	; 104
 104:	18 ae       	std	Y+56, r1	; 0x38
 106:	ba ab       	std	Y+50, r27	; 0x32
 108:	55 8c       	ldd	r5, Z+29	; 0x1d
 10a:	1d 3c       	cpi	r17, 0xCD	; 205
 10c:	b7 cc       	rjmp	.-1682   	; 0xfffffa7c <__eeprom_end+0xff7efa7c>
 10e:	57 63       	ori	r21, 0x37	; 55
 110:	bd 6d       	ori	r27, 0xDD	; 221
 112:	ed fd       	.word	0xfded	; ????
 114:	75 3e       	cpi	r23, 0xE5	; 229
 116:	f6 17       	cp	r31, r22
 118:	72 31       	cpi	r23, 0x12	; 18
 11a:	bf 00       	.word	0x00bf	; ????
 11c:	00 00       	nop
 11e:	80 3f       	cpi	r24, 0xF0	; 240
 120:	08 00       	.word	0x0008	; ????
 122:	00 00       	nop
 124:	be 92       	st	-X, r11
 126:	24 49       	sbci	r18, 0x94	; 148
 128:	12 3e       	cpi	r17, 0xE2	; 226
 12a:	ab aa       	std	Y+51, r10	; 0x33
 12c:	aa 2a       	or	r10, r26
 12e:	be cd       	rjmp	.-1156   	; 0xfffffcac <__eeprom_end+0xff7efcac>
 130:	cc cc       	rjmp	.-1640   	; 0xfffffaca <__eeprom_end+0xff7efaca>
 132:	4c 3e       	cpi	r20, 0xEC	; 236
 134:	00 00       	nop
 136:	00 80       	ld	r0, Z
 138:	be ab       	std	Y+54, r27	; 0x36
 13a:	aa aa       	std	Y+50, r10	; 0x32
 13c:	aa 3e       	cpi	r26, 0xEA	; 234
 13e:	00 00       	nop
 140:	00 00       	nop
 142:	bf 00       	.word	0x00bf	; ????
 144:	00 00       	nop
 146:	80 3f       	cpi	r24, 0xF0	; 240
 148:	00 00       	nop
 14a:	00 00       	nop
 14c:	00 08       	sbc	r0, r0
 14e:	41 78       	andi	r20, 0x81	; 129
 150:	d3 bb       	out	0x13, r29	; 19
 152:	43 87       	std	Z+11, r20	; 0x0b
 154:	d1 13       	cpse	r29, r17
 156:	3d 19       	sub	r19, r13
 158:	0e 3c       	cpi	r16, 0xCE	; 206
 15a:	c3 bd       	out	0x23, r28	; 35
 15c:	42 82       	std	Z+2, r4	; 0x02
 15e:	ad 2b       	or	r26, r29
 160:	3e 68       	ori	r19, 0x8E	; 142
 162:	ec 82       	std	Y+4, r14	; 0x04
 164:	76 be       	out	0x36, r7	; 54
 166:	d9 8f       	std	Y+25, r29	; 0x19
 168:	e1 a9       	ldd	r30, Z+49	; 0x31
 16a:	3e 4c       	sbci	r19, 0xCE	; 206
 16c:	80 ef       	ldi	r24, 0xF0	; 240
 16e:	ff be       	out	0x3f, r15	; 63
 170:	01 c4       	rjmp	.+2050   	; 0x974 <__mulsf3_pse+0x88>
 172:	ff 7f       	andi	r31, 0xFF	; 255
 174:	3f 00       	.word	0x003f	; ????
 176:	00 00       	nop
	...

0000017a <__ctors_end>:
 17a:	11 24       	eor	r1, r1
 17c:	1f be       	out	0x3f, r1	; 63
 17e:	cf ef       	ldi	r28, 0xFF	; 255
 180:	d1 e2       	ldi	r29, 0x21	; 33
 182:	de bf       	out	0x3e, r29	; 62
 184:	cd bf       	out	0x3d, r28	; 61
 186:	00 e0       	ldi	r16, 0x00	; 0
 188:	0c bf       	out	0x3c, r16	; 60

0000018a <__do_clear_bss>:
 18a:	22 e0       	ldi	r18, 0x02	; 2
 18c:	a0 e0       	ldi	r26, 0x00	; 0
 18e:	b2 e0       	ldi	r27, 0x02	; 2
 190:	01 c0       	rjmp	.+2      	; 0x194 <.do_clear_bss_start>

00000192 <.do_clear_bss_loop>:
 192:	1d 92       	st	X+, r1

00000194 <.do_clear_bss_start>:
 194:	a1 30       	cpi	r26, 0x01	; 1
 196:	b2 07       	cpc	r27, r18
 198:	e1 f7       	brne	.-8      	; 0x192 <.do_clear_bss_loop>
 19a:	02 d0       	rcall	.+4      	; 0x1a0 <main>
 19c:	ce c5       	rjmp	.+2972   	; 0xd3a <_exit>

0000019e <__bad_interrupt>:
 19e:	30 cf       	rjmp	.-416    	; 0x0 <__vectors>

000001a0 <main>:
void updateSegment(unsigned int segNumber);	//Sets the 7-segment based on a number, the position shifts with every update
uint8_t numberToBitmask(uint8_t num);	//Turns any number into a 7-segment bitmask
void edgeDetect(edge *port);	//Function used for edge detection

//***MAIN ROUTINE***
int main(void){
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
 1a8:	67 97       	sbiw	r28, 0x17	; 23
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
	//**Init**
	
	//**Variables**
	uint8_t isRunning;
	uint8_t halfStepper; //In order to run 5mS delay but increment delayCouner_pv only every 10mS
	unsigned int delayCounter_pv = 0;
 1b4:	1c 82       	std	Y+4, r1	; 0x04
 1b6:	1b 82       	std	Y+3, r1	; 0x03
	edge ctrlButtons = {0,0,&PINJ};
 1b8:	25 e0       	ldi	r18, 0x05	; 5
 1ba:	ce 01       	movw	r24, r28
 1bc:	43 96       	adiw	r24, 0x13	; 19
 1be:	fc 01       	movw	r30, r24
 1c0:	32 2f       	mov	r19, r18
 1c2:	11 92       	st	Z+, r1
 1c4:	3a 95       	dec	r19
 1c6:	e9 f7       	brne	.-6      	; 0x1c2 <main+0x22>
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	9e 8b       	std	Y+22, r25	; 0x16
 1ce:	8d 8b       	std	Y+21, r24	; 0x15
		
	//**Data Direction Registers**
	//*1=Output*
	DDRG = 0xff;
 1d0:	83 e3       	ldi	r24, 0x33	; 51
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	fc 01       	movw	r30, r24
 1d8:	20 83       	st	Z, r18
	DDRH = 0xff;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	fc 01       	movw	r30, r24
 1e2:	20 83       	st	Z, r18
	DDRJ = 0;
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	fc 01       	movw	r30, r24
 1ea:	10 82       	st	Z, r1
	
	//**Turn on the colon led and enable the segment**
	colonOn;
 1ec:	84 e3       	ldi	r24, 0x34	; 52
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	24 e3       	ldi	r18, 0x34	; 52
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	f9 01       	movw	r30, r18
 1f6:	20 81       	ld	r18, Z
 1f8:	20 61       	ori	r18, 0x10	; 16
 1fa:	fc 01       	movw	r30, r24
 1fc:	20 83       	st	Z, r18
	segEnable;
 1fe:	84 e3       	ldi	r24, 0x34	; 52
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	24 e3       	ldi	r18, 0x34	; 52
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	f9 01       	movw	r30, r18
 208:	20 81       	ld	r18, Z
 20a:	24 60       	ori	r18, 0x04	; 4
 20c:	fc 01       	movw	r30, r24
 20e:	20 83       	st	Z, r18
	//***SUPER LOOP***
    while (1){
		
		//**Detect positive Edges on StartStop and Reset**
		if(tstStartStop_pos) isRunning = !isRunning;
 210:	8b 89       	ldd	r24, Y+19	; 0x13
 212:	88 2f       	mov	r24, r24
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	81 70       	andi	r24, 0x01	; 1
 218:	99 27       	eor	r25, r25
 21a:	89 2b       	or	r24, r25
 21c:	31 f0       	breq	.+12     	; 0x22a <main+0x8a>
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	99 81       	ldd	r25, Y+1	; 0x01
 222:	99 23       	and	r25, r25
 224:	09 f0       	breq	.+2      	; 0x228 <main+0x88>
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	89 83       	std	Y+1, r24	; 0x01
		if(tstReset_pos){
 22a:	8b 89       	ldd	r24, Y+19	; 0x13
 22c:	88 2f       	mov	r24, r24
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	82 70       	andi	r24, 0x02	; 2
 232:	99 27       	eor	r25, r25
 234:	89 2b       	or	r24, r25
 236:	19 f0       	breq	.+6      	; 0x23e <main+0x9e>
			delayCounter_pv = 0;
 238:	1c 82       	std	Y+4, r1	; 0x04
 23a:	1b 82       	std	Y+3, r1	; 0x03
			isRunning = 0;
 23c:	19 82       	std	Y+1, r1	; 0x01
		}
		
		//**Update the segment**
		if(delayCounter_pv == 0)updateSegment(0);
 23e:	8b 81       	ldd	r24, Y+3	; 0x03
 240:	9c 81       	ldd	r25, Y+4	; 0x04
 242:	89 2b       	or	r24, r25
 244:	21 f4       	brne	.+8      	; 0x24e <main+0xae>
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	88 d0       	rcall	.+272    	; 0x35c <updateSegment>
 24c:	03 c0       	rjmp	.+6      	; 0x254 <main+0xb4>
		else updateSegment(delayCounter_pv);
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	9c 81       	ldd	r25, Y+4	; 0x04
 252:	84 d0       	rcall	.+264    	; 0x35c <updateSegment>
		
		//**Do half steps and stop at a minute (59'990mS)**
		if(delayCounter_pv < 9999 && isRunning){
 254:	8b 81       	ldd	r24, Y+3	; 0x03
 256:	9c 81       	ldd	r25, Y+4	; 0x04
 258:	8f 30       	cpi	r24, 0x0F	; 15
 25a:	97 42       	sbci	r25, 0x27	; 39
 25c:	78 f4       	brcc	.+30     	; 0x27c <main+0xdc>
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	88 23       	and	r24, r24
 262:	61 f0       	breq	.+24     	; 0x27c <main+0xdc>
			if(halfStepper){
 264:	8a 81       	ldd	r24, Y+2	; 0x02
 266:	88 23       	and	r24, r24
 268:	39 f0       	breq	.+14     	; 0x278 <main+0xd8>
				halfStepper = 0;
 26a:	1a 82       	std	Y+2, r1	; 0x02
				delayCounter_pv++;
 26c:	8b 81       	ldd	r24, Y+3	; 0x03
 26e:	9c 81       	ldd	r25, Y+4	; 0x04
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	9c 83       	std	Y+4, r25	; 0x04
 274:	8b 83       	std	Y+3, r24	; 0x03
 276:	02 c0       	rjmp	.+4      	; 0x27c <main+0xdc>
			}
			else halfStepper = 1;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	8a 83       	std	Y+2, r24	; 0x02
		}
		
		//**Detect the edges**
		edgeDetect(&ctrlButtons);
 27c:	ce 01       	movw	r24, r28
 27e:	43 96       	adiw	r24, 0x13	; 19
 280:	a4 d1       	rcall	.+840    	; 0x5ca <edgeDetect>
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	a0 ea       	ldi	r26, 0xA0	; 160
 288:	b0 e4       	ldi	r27, 0x40	; 64
 28a:	8d 83       	std	Y+5, r24	; 0x05
 28c:	9e 83       	std	Y+6, r25	; 0x06
 28e:	af 83       	std	Y+7, r26	; 0x07
 290:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 292:	20 e0       	ldi	r18, 0x00	; 0
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	4a e7       	ldi	r20, 0x7A	; 122
 298:	55 e4       	ldi	r21, 0x45	; 69
 29a:	6d 81       	ldd	r22, Y+5	; 0x05
 29c:	7e 81       	ldd	r23, Y+6	; 0x06
 29e:	8f 81       	ldd	r24, Y+7	; 0x07
 2a0:	98 85       	ldd	r25, Y+8	; 0x08
 2a2:	16 d3       	rcall	.+1580   	; 0x8d0 <__mulsf3>
 2a4:	dc 01       	movw	r26, r24
 2a6:	cb 01       	movw	r24, r22
 2a8:	89 87       	std	Y+9, r24	; 0x09
 2aa:	9a 87       	std	Y+10, r25	; 0x0a
 2ac:	ab 87       	std	Y+11, r26	; 0x0b
 2ae:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	40 e8       	ldi	r20, 0x80	; 128
 2b6:	5f e3       	ldi	r21, 0x3F	; 63
 2b8:	69 85       	ldd	r22, Y+9	; 0x09
 2ba:	7a 85       	ldd	r23, Y+10	; 0x0a
 2bc:	8b 85       	ldd	r24, Y+11	; 0x0b
 2be:	9c 85       	ldd	r25, Y+12	; 0x0c
 2c0:	b9 d1       	rcall	.+882    	; 0x634 <__cmpsf2>
 2c2:	88 23       	and	r24, r24
 2c4:	2c f4       	brge	.+10     	; 0x2d0 <main+0x130>
		__ticks = 1;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	9e 87       	std	Y+14, r25	; 0x0e
 2cc:	8d 87       	std	Y+13, r24	; 0x0d
 2ce:	3b c0       	rjmp	.+118    	; 0x346 <main+0x1a6>
	else if (__tmp > 65535)
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	3f ef       	ldi	r19, 0xFF	; 255
 2d4:	4f e7       	ldi	r20, 0x7F	; 127
 2d6:	57 e4       	ldi	r21, 0x47	; 71
 2d8:	69 85       	ldd	r22, Y+9	; 0x09
 2da:	7a 85       	ldd	r23, Y+10	; 0x0a
 2dc:	8b 85       	ldd	r24, Y+11	; 0x0b
 2de:	9c 85       	ldd	r25, Y+12	; 0x0c
 2e0:	f3 d2       	rcall	.+1510   	; 0x8c8 <__gesf2>
 2e2:	18 16       	cp	r1, r24
 2e4:	3c f5       	brge	.+78     	; 0x334 <main+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	40 e2       	ldi	r20, 0x20	; 32
 2ec:	51 e4       	ldi	r21, 0x41	; 65
 2ee:	6d 81       	ldd	r22, Y+5	; 0x05
 2f0:	7e 81       	ldd	r23, Y+6	; 0x06
 2f2:	8f 81       	ldd	r24, Y+7	; 0x07
 2f4:	98 85       	ldd	r25, Y+8	; 0x08
 2f6:	ec d2       	rcall	.+1496   	; 0x8d0 <__mulsf3>
 2f8:	dc 01       	movw	r26, r24
 2fa:	cb 01       	movw	r24, r22
 2fc:	bc 01       	movw	r22, r24
 2fe:	cd 01       	movw	r24, r26
 300:	05 d2       	rcall	.+1034   	; 0x70c <__fixunssfsi>
 302:	dc 01       	movw	r26, r24
 304:	cb 01       	movw	r24, r22
 306:	9e 87       	std	Y+14, r25	; 0x0e
 308:	8d 87       	std	Y+13, r24	; 0x0d
 30a:	0f c0       	rjmp	.+30     	; 0x32a <main+0x18a>
 30c:	80 e9       	ldi	r24, 0x90	; 144
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	98 8b       	std	Y+16, r25	; 0x10
 312:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 314:	8f 85       	ldd	r24, Y+15	; 0x0f
 316:	98 89       	ldd	r25, Y+16	; 0x10
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <main+0x178>
 31c:	98 8b       	std	Y+16, r25	; 0x10
 31e:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 320:	8d 85       	ldd	r24, Y+13	; 0x0d
 322:	9e 85       	ldd	r25, Y+14	; 0x0e
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	9e 87       	std	Y+14, r25	; 0x0e
 328:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 32a:	8d 85       	ldd	r24, Y+13	; 0x0d
 32c:	9e 85       	ldd	r25, Y+14	; 0x0e
 32e:	89 2b       	or	r24, r25
 330:	69 f7       	brne	.-38     	; 0x30c <main+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 332:	13 c0       	rjmp	.+38     	; 0x35a <main+0x1ba>
 334:	69 85       	ldd	r22, Y+9	; 0x09
 336:	7a 85       	ldd	r23, Y+10	; 0x0a
 338:	8b 85       	ldd	r24, Y+11	; 0x0b
 33a:	9c 85       	ldd	r25, Y+12	; 0x0c
 33c:	e7 d1       	rcall	.+974    	; 0x70c <__fixunssfsi>
 33e:	dc 01       	movw	r26, r24
 340:	cb 01       	movw	r24, r22
 342:	9e 87       	std	Y+14, r25	; 0x0e
 344:	8d 87       	std	Y+13, r24	; 0x0d
 346:	8d 85       	ldd	r24, Y+13	; 0x0d
 348:	9e 85       	ldd	r25, Y+14	; 0x0e
 34a:	9a 8b       	std	Y+18, r25	; 0x12
 34c:	89 8b       	std	Y+17, r24	; 0x11
 34e:	89 89       	ldd	r24, Y+17	; 0x11
 350:	9a 89       	ldd	r25, Y+18	; 0x12
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <main+0x1b2>
 356:	9a 8b       	std	Y+18, r25	; 0x12
 358:	89 8b       	std	Y+17, r24	; 0x11
		_delay_ms(5);
    }
 35a:	5a cf       	rjmp	.-332    	; 0x210 <main+0x70>

0000035c <updateSegment>:
 * Note: This function takes care of the incremeting
 * so no individual segment can be set.
 * @param segNumber: The Number to display
 * @return: VOID
*/
void updateSegment(unsigned int segNumber){
 35c:	cf 92       	push	r12
 35e:	df 92       	push	r13
 360:	ef 92       	push	r14
 362:	ff 92       	push	r15
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	00 d0       	rcall	.+0      	; 0x36a <updateSegment+0xe>
 36a:	1f 92       	push	r1
 36c:	cd b7       	in	r28, 0x3d	; 61
 36e:	de b7       	in	r29, 0x3e	; 62
 370:	9c 83       	std	Y+4, r25	; 0x04
 372:	8b 83       	std	Y+3, r24	; 0x03
	static uint8_t segPos;
	
	//**Select which segment is currently being displayed**
	switch(segPos){
 374:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 378:	88 2f       	mov	r24, r24
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	91 05       	cpc	r25, r1
 380:	f9 f0       	breq	.+62     	; 0x3c0 <updateSegment+0x64>
 382:	82 30       	cpi	r24, 0x02	; 2
 384:	91 05       	cpc	r25, r1
 386:	1c f4       	brge	.+6      	; 0x38e <updateSegment+0x32>
 388:	89 2b       	or	r24, r25
 38a:	39 f0       	breq	.+14     	; 0x39a <updateSegment+0x3e>
 38c:	52 c0       	rjmp	.+164    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 38e:	82 30       	cpi	r24, 0x02	; 2
 390:	91 05       	cpc	r25, r1
 392:	49 f1       	breq	.+82     	; 0x3e6 <updateSegment+0x8a>
 394:	03 97       	sbiw	r24, 0x03	; 3
 396:	d1 f1       	breq	.+116    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 398:	4c c0       	rjmp	.+152    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		case 0:
			segSel0_off;
 39a:	84 e3       	ldi	r24, 0x34	; 52
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	24 e3       	ldi	r18, 0x34	; 52
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	f9 01       	movw	r30, r18
 3a4:	20 81       	ld	r18, Z
 3a6:	2e 7f       	andi	r18, 0xFE	; 254
 3a8:	fc 01       	movw	r30, r24
 3aa:	20 83       	st	Z, r18
			segSel1_off;
 3ac:	84 e3       	ldi	r24, 0x34	; 52
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	24 e3       	ldi	r18, 0x34	; 52
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	f9 01       	movw	r30, r18
 3b6:	20 81       	ld	r18, Z
 3b8:	2d 7f       	andi	r18, 0xFD	; 253
 3ba:	fc 01       	movw	r30, r24
 3bc:	20 83       	st	Z, r18
			break;
 3be:	4c c0       	rjmp	.+152    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		case 1:
			segSel0_on;
 3c0:	84 e3       	ldi	r24, 0x34	; 52
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	24 e3       	ldi	r18, 0x34	; 52
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	f9 01       	movw	r30, r18
 3ca:	20 81       	ld	r18, Z
 3cc:	21 60       	ori	r18, 0x01	; 1
 3ce:	fc 01       	movw	r30, r24
 3d0:	20 83       	st	Z, r18
			segSel1_off;
 3d2:	84 e3       	ldi	r24, 0x34	; 52
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	24 e3       	ldi	r18, 0x34	; 52
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	f9 01       	movw	r30, r18
 3dc:	20 81       	ld	r18, Z
 3de:	2d 7f       	andi	r18, 0xFD	; 253
 3e0:	fc 01       	movw	r30, r24
 3e2:	20 83       	st	Z, r18
			break;
 3e4:	39 c0       	rjmp	.+114    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		case 2:
			segSel0_off;
 3e6:	84 e3       	ldi	r24, 0x34	; 52
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	24 e3       	ldi	r18, 0x34	; 52
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	f9 01       	movw	r30, r18
 3f0:	20 81       	ld	r18, Z
 3f2:	2e 7f       	andi	r18, 0xFE	; 254
 3f4:	fc 01       	movw	r30, r24
 3f6:	20 83       	st	Z, r18
			segSel1_on;
 3f8:	84 e3       	ldi	r24, 0x34	; 52
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	24 e3       	ldi	r18, 0x34	; 52
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	f9 01       	movw	r30, r18
 402:	20 81       	ld	r18, Z
 404:	22 60       	ori	r18, 0x02	; 2
 406:	fc 01       	movw	r30, r24
 408:	20 83       	st	Z, r18
			break;
 40a:	26 c0       	rjmp	.+76     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		case 3:
			segSel0_on;
 40c:	84 e3       	ldi	r24, 0x34	; 52
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	24 e3       	ldi	r18, 0x34	; 52
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	f9 01       	movw	r30, r18
 416:	20 81       	ld	r18, Z
 418:	21 60       	ori	r18, 0x01	; 1
 41a:	fc 01       	movw	r30, r24
 41c:	20 83       	st	Z, r18
			segSel1_on;
 41e:	84 e3       	ldi	r24, 0x34	; 52
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	24 e3       	ldi	r18, 0x34	; 52
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	f9 01       	movw	r30, r18
 428:	20 81       	ld	r18, Z
 42a:	22 60       	ori	r18, 0x02	; 2
 42c:	fc 01       	movw	r30, r24
 42e:	20 83       	st	Z, r18
			break;
 430:	13 c0       	rjmp	.+38     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		default:
			segSel0_off;
 432:	84 e3       	ldi	r24, 0x34	; 52
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	24 e3       	ldi	r18, 0x34	; 52
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	f9 01       	movw	r30, r18
 43c:	20 81       	ld	r18, Z
 43e:	2e 7f       	andi	r18, 0xFE	; 254
 440:	fc 01       	movw	r30, r24
 442:	20 83       	st	Z, r18
			segSel1_off;
 444:	84 e3       	ldi	r24, 0x34	; 52
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	24 e3       	ldi	r18, 0x34	; 52
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	f9 01       	movw	r30, r18
 44e:	20 81       	ld	r18, Z
 450:	2d 7f       	andi	r18, 0xFD	; 253
 452:	fc 01       	movw	r30, r24
			break;
 454:	20 83       	st	Z, r18
	}
	
	//**Create the bitmask for the given number and set PORTH to it**
	uint8_t bitmask;
	if(segNumber == 0){
 456:	00 00       	nop
 458:	8b 81       	ldd	r24, Y+3	; 0x03
 45a:	9c 81       	ldd	r25, Y+4	; 0x04
 45c:	89 2b       	or	r24, r25
		bitmask = numberToBitmask(0); //If the given number is zero, display it as such
 45e:	21 f4       	brne	.+8      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	7e d0       	rcall	.+252    	; 0x560 <numberToBitmask>
 464:	89 83       	std	Y+1, r24	; 0x01
	}
	else{
		uint8_t segDigit;
		segDigit = ((uint8_t)(segNumber/pow(10, segPos)))%10;	//Get the digit at segPos from segNumber
 466:	3e c0       	rjmp	.+124    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 468:	8b 81       	ldd	r24, Y+3	; 0x03
 46a:	9c 81       	ldd	r25, Y+4	; 0x04
 46c:	cc 01       	movw	r24, r24
 46e:	a0 e0       	ldi	r26, 0x00	; 0
 470:	b0 e0       	ldi	r27, 0x00	; 0
 472:	bc 01       	movw	r22, r24
 474:	cd 01       	movw	r24, r26
 476:	76 d1       	rcall	.+748    	; 0x764 <__floatunsisf>
 478:	6b 01       	movw	r12, r22
 47a:	7c 01       	movw	r14, r24
 47c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 480:	88 2f       	mov	r24, r24
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	a0 e0       	ldi	r26, 0x00	; 0
 486:	b0 e0       	ldi	r27, 0x00	; 0
 488:	bc 01       	movw	r22, r24
 48a:	cd 01       	movw	r24, r26
 48c:	6b d1       	rcall	.+726    	; 0x764 <__floatunsisf>
 48e:	dc 01       	movw	r26, r24
 490:	cb 01       	movw	r24, r22
 492:	9c 01       	movw	r18, r24
 494:	ad 01       	movw	r20, r26
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	80 e2       	ldi	r24, 0x20	; 32
 49c:	91 e4       	ldi	r25, 0x41	; 65
 49e:	7b d2       	rcall	.+1270   	; 0x996 <pow>
 4a0:	dc 01       	movw	r26, r24
 4a2:	cb 01       	movw	r24, r22
 4a4:	9c 01       	movw	r18, r24
 4a6:	ad 01       	movw	r20, r26
 4a8:	c7 01       	movw	r24, r14
 4aa:	b6 01       	movw	r22, r12
 4ac:	c7 d0       	rcall	.+398    	; 0x63c <__divsf3>
 4ae:	dc 01       	movw	r26, r24
 4b0:	cb 01       	movw	r24, r22
 4b2:	bc 01       	movw	r22, r24
 4b4:	cd 01       	movw	r24, r26
 4b6:	2a d1       	rcall	.+596    	; 0x70c <__fixunssfsi>
 4b8:	dc 01       	movw	r26, r24
 4ba:	cb 01       	movw	r24, r22
 4bc:	98 2f       	mov	r25, r24
 4be:	8d ec       	ldi	r24, 0xCD	; 205
 4c0:	98 9f       	mul	r25, r24
 4c2:	81 2d       	mov	r24, r1
 4c4:	11 24       	eor	r1, r1
 4c6:	86 95       	lsr	r24
 4c8:	86 95       	lsr	r24
 4ca:	86 95       	lsr	r24
 4cc:	88 0f       	add	r24, r24
 4ce:	28 2f       	mov	r18, r24
 4d0:	22 0f       	add	r18, r18
 4d2:	22 0f       	add	r18, r18
 4d4:	82 0f       	add	r24, r18
 4d6:	f9 2f       	mov	r31, r25
 4d8:	f8 1b       	sub	r31, r24
 4da:	8f 2f       	mov	r24, r31
		bitmask = numberToBitmask(segDigit);
 4dc:	8a 83       	std	Y+2, r24	; 0x02
 4de:	8a 81       	ldd	r24, Y+2	; 0x02
 4e0:	3f d0       	rcall	.+126    	; 0x560 <numberToBitmask>
 4e2:	89 83       	std	Y+1, r24	; 0x01
	}
	segDisable;
 4e4:	84 e3       	ldi	r24, 0x34	; 52
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	24 e3       	ldi	r18, 0x34	; 52
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	f9 01       	movw	r30, r18
 4ee:	20 81       	ld	r18, Z
 4f0:	2b 7f       	andi	r18, 0xFB	; 251
 4f2:	fc 01       	movw	r30, r24
 4f4:	20 83       	st	Z, r18
	setSeg(bitmask);
 4f6:	82 e0       	ldi	r24, 0x02	; 2
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	22 e0       	ldi	r18, 0x02	; 2
 4fc:	31 e0       	ldi	r19, 0x01	; 1
 4fe:	f9 01       	movw	r30, r18
 500:	30 81       	ld	r19, Z
 502:	29 81       	ldd	r18, Y+1	; 0x01
 504:	23 2b       	or	r18, r19
 506:	fc 01       	movw	r30, r24
 508:	20 83       	st	Z, r18
	delSeg(bitmask);
 50a:	82 e0       	ldi	r24, 0x02	; 2
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	22 e0       	ldi	r18, 0x02	; 2
 510:	31 e0       	ldi	r19, 0x01	; 1
 512:	f9 01       	movw	r30, r18
 514:	30 81       	ld	r19, Z
 516:	29 81       	ldd	r18, Y+1	; 0x01
 518:	23 23       	and	r18, r19
 51a:	fc 01       	movw	r30, r24
 51c:	20 83       	st	Z, r18
	segEnable;
 51e:	84 e3       	ldi	r24, 0x34	; 52
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	24 e3       	ldi	r18, 0x34	; 52
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	f9 01       	movw	r30, r18
 528:	20 81       	ld	r18, Z
 52a:	24 60       	ori	r18, 0x04	; 4
 52c:	fc 01       	movw	r30, r24
 52e:	20 83       	st	Z, r18
	
	if(segPos < 3) segPos++; //increment the segment position till the last segment
 530:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 534:	83 30       	cpi	r24, 0x03	; 3
 536:	30 f4       	brcc	.+12     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 538:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 53c:	8f 5f       	subi	r24, 0xFF	; 255
 53e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
	else segPos = 0; //set the segment position to zero if its past the last one
}
 542:	02 c0       	rjmp	.+4      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	setSeg(bitmask);
	delSeg(bitmask);
	segEnable;
	
	if(segPos < 3) segPos++; //increment the segment position till the last segment
	else segPos = 0; //set the segment position to zero if its past the last one
 544:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
}
 548:	00 00       	nop
 54a:	0f 90       	pop	r0
 54c:	0f 90       	pop	r0
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	ff 90       	pop	r15
 558:	ef 90       	pop	r14
 55a:	df 90       	pop	r13
 55c:	cf 90       	pop	r12
 55e:	08 95       	ret

00000560 <numberToBitmask>:
/***NUMBER TO BITMASK***
 * Turns a number into a seven segment bitmask
 * @param: num = the number to turn into a 7-segment bitmask
 * @return: the bitmask of the given number
*/
uint8_t numberToBitmask(uint8_t num){
 560:	cf 93       	push	r28
 562:	df 93       	push	r29
 564:	1f 92       	push	r1
 566:	cd b7       	in	r28, 0x3d	; 61
 568:	de b7       	in	r29, 0x3e	; 62
 56a:	89 83       	std	Y+1, r24	; 0x01
	switch(num){
 56c:	89 81       	ldd	r24, Y+1	; 0x01
 56e:	88 2f       	mov	r24, r24
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	09 2e       	mov	r0, r25
 574:	00 0c       	add	r0, r0
 576:	aa 0b       	sbc	r26, r26
 578:	bb 0b       	sbc	r27, r27
 57a:	40 e0       	ldi	r20, 0x00	; 0
 57c:	50 e0       	ldi	r21, 0x00	; 0
 57e:	29 e0       	ldi	r18, 0x09	; 9
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	84 1b       	sub	r24, r20
 584:	95 0b       	sbc	r25, r21
 586:	28 17       	cp	r18, r24
 588:	39 07       	cpc	r19, r25
 58a:	d0 f0       	brcs	.+52     	; 0x5c0 <numberToBitmask+0x60>
 58c:	fc 01       	movw	r30, r24
 58e:	88 27       	eor	r24, r24
 590:	ee 58       	subi	r30, 0x8E	; 142
 592:	ff 4f       	sbci	r31, 0xFF	; 255
 594:	8f 4f       	sbci	r24, 0xFF	; 255
 596:	c9 c3       	rjmp	.+1938   	; 0xd2a <__tablejump2__>
		case 0:
			return 0b00111111;
 598:	8f e3       	ldi	r24, 0x3F	; 63
 59a:	13 c0       	rjmp	.+38     	; 0x5c2 <numberToBitmask+0x62>
		case 1:
			return 0b00000110;
 59c:	86 e0       	ldi	r24, 0x06	; 6
 59e:	11 c0       	rjmp	.+34     	; 0x5c2 <numberToBitmask+0x62>
		case 2:
			return 0b01011011;
 5a0:	8b e5       	ldi	r24, 0x5B	; 91
 5a2:	0f c0       	rjmp	.+30     	; 0x5c2 <numberToBitmask+0x62>
		case 3:
			return 0b01001111;
 5a4:	8f e4       	ldi	r24, 0x4F	; 79
 5a6:	0d c0       	rjmp	.+26     	; 0x5c2 <numberToBitmask+0x62>
		case 4:
			return 0b01100110;
 5a8:	86 e6       	ldi	r24, 0x66	; 102
 5aa:	0b c0       	rjmp	.+22     	; 0x5c2 <numberToBitmask+0x62>
		case 5:
			return 0b01101101;
 5ac:	8d e6       	ldi	r24, 0x6D	; 109
 5ae:	09 c0       	rjmp	.+18     	; 0x5c2 <numberToBitmask+0x62>
		case 6:
			return 0b01111101;
 5b0:	8d e7       	ldi	r24, 0x7D	; 125
 5b2:	07 c0       	rjmp	.+14     	; 0x5c2 <numberToBitmask+0x62>
		case 7:
			return 0b00000111;
 5b4:	87 e0       	ldi	r24, 0x07	; 7
 5b6:	05 c0       	rjmp	.+10     	; 0x5c2 <numberToBitmask+0x62>
		case 8:
			return 0b01111111;
 5b8:	8f e7       	ldi	r24, 0x7F	; 127
 5ba:	03 c0       	rjmp	.+6      	; 0x5c2 <numberToBitmask+0x62>
		case 9:
			return 0b01101111;
 5bc:	8f e6       	ldi	r24, 0x6F	; 111
 5be:	01 c0       	rjmp	.+2      	; 0x5c2 <numberToBitmask+0x62>
		default:
			return 0b01000000;
 5c0:	80 e4       	ldi	r24, 0x40	; 64
	}
}
 5c2:	0f 90       	pop	r0
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
 5c8:	08 95       	ret

000005ca <edgeDetect>:
// ***EDGE DETECTION***
/**
*@param: An edge struct is needed which defines stores all the necessary stuff for the edge detection
*@return: VOID
*/
void edgeDetect(edge *port){
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
 5ce:	00 d0       	rcall	.+0      	; 0x5d0 <edgeDetect+0x6>
 5d0:	cd b7       	in	r28, 0x3d	; 61
 5d2:	de b7       	in	r29, 0x3e	; 62
 5d4:	9b 83       	std	Y+3, r25	; 0x03
 5d6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t pinjCurrent = *(port->port);
 5d8:	8a 81       	ldd	r24, Y+2	; 0x02
 5da:	9b 81       	ldd	r25, Y+3	; 0x03
 5dc:	fc 01       	movw	r30, r24
 5de:	82 81       	ldd	r24, Z+2	; 0x02
 5e0:	93 81       	ldd	r25, Z+3	; 0x03
 5e2:	fc 01       	movw	r30, r24
 5e4:	80 81       	ld	r24, Z
 5e6:	89 83       	std	Y+1, r24	; 0x01
	port->pinPos = pinjCurrent & ~port->old;
 5e8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ea:	9b 81       	ldd	r25, Y+3	; 0x03
 5ec:	fc 01       	movw	r30, r24
 5ee:	84 81       	ldd	r24, Z+4	; 0x04
 5f0:	98 2f       	mov	r25, r24
 5f2:	90 95       	com	r25
 5f4:	89 81       	ldd	r24, Y+1	; 0x01
 5f6:	89 23       	and	r24, r25
 5f8:	28 2f       	mov	r18, r24
 5fa:	8a 81       	ldd	r24, Y+2	; 0x02
 5fc:	9b 81       	ldd	r25, Y+3	; 0x03
 5fe:	fc 01       	movw	r30, r24
 600:	20 83       	st	Z, r18
	port->pinNeg = ~pinjCurrent & port->old;
 602:	89 81       	ldd	r24, Y+1	; 0x01
 604:	28 2f       	mov	r18, r24
 606:	20 95       	com	r18
 608:	8a 81       	ldd	r24, Y+2	; 0x02
 60a:	9b 81       	ldd	r25, Y+3	; 0x03
 60c:	fc 01       	movw	r30, r24
 60e:	84 81       	ldd	r24, Z+4	; 0x04
 610:	82 23       	and	r24, r18
 612:	28 2f       	mov	r18, r24
 614:	8a 81       	ldd	r24, Y+2	; 0x02
 616:	9b 81       	ldd	r25, Y+3	; 0x03
 618:	fc 01       	movw	r30, r24
 61a:	21 83       	std	Z+1, r18	; 0x01
	port->old = pinjCurrent;
 61c:	8a 81       	ldd	r24, Y+2	; 0x02
 61e:	9b 81       	ldd	r25, Y+3	; 0x03
 620:	29 81       	ldd	r18, Y+1	; 0x01
 622:	fc 01       	movw	r30, r24
 624:	24 83       	std	Z+4, r18	; 0x04
} // **EOF**
 626:	00 00       	nop
 628:	0f 90       	pop	r0
 62a:	0f 90       	pop	r0
 62c:	0f 90       	pop	r0
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	08 95       	ret

00000634 <__cmpsf2>:
 634:	d4 d0       	rcall	.+424    	; 0x7de <__fp_cmp>
 636:	08 f4       	brcc	.+2      	; 0x63a <__cmpsf2+0x6>
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	08 95       	ret

0000063c <__divsf3>:
 63c:	0c d0       	rcall	.+24     	; 0x656 <__divsf3x>
 63e:	0a c1       	rjmp	.+532    	; 0x854 <__fp_round>
 640:	02 d1       	rcall	.+516    	; 0x846 <__fp_pscB>
 642:	40 f0       	brcs	.+16     	; 0x654 <__divsf3+0x18>
 644:	f9 d0       	rcall	.+498    	; 0x838 <__fp_pscA>
 646:	30 f0       	brcs	.+12     	; 0x654 <__divsf3+0x18>
 648:	21 f4       	brne	.+8      	; 0x652 <__divsf3+0x16>
 64a:	5f 3f       	cpi	r21, 0xFF	; 255
 64c:	19 f0       	breq	.+6      	; 0x654 <__divsf3+0x18>
 64e:	eb c0       	rjmp	.+470    	; 0x826 <__fp_inf>
 650:	51 11       	cpse	r21, r1
 652:	34 c1       	rjmp	.+616    	; 0x8bc <__fp_szero>
 654:	ee c0       	rjmp	.+476    	; 0x832 <__fp_nan>

00000656 <__divsf3x>:
 656:	0f d1       	rcall	.+542    	; 0x876 <__fp_split3>
 658:	98 f3       	brcs	.-26     	; 0x640 <__divsf3+0x4>

0000065a <__divsf3_pse>:
 65a:	99 23       	and	r25, r25
 65c:	c9 f3       	breq	.-14     	; 0x650 <__divsf3+0x14>
 65e:	55 23       	and	r21, r21
 660:	b1 f3       	breq	.-20     	; 0x64e <__divsf3+0x12>
 662:	95 1b       	sub	r25, r21
 664:	55 0b       	sbc	r21, r21
 666:	bb 27       	eor	r27, r27
 668:	aa 27       	eor	r26, r26
 66a:	62 17       	cp	r22, r18
 66c:	73 07       	cpc	r23, r19
 66e:	84 07       	cpc	r24, r20
 670:	38 f0       	brcs	.+14     	; 0x680 <__divsf3_pse+0x26>
 672:	9f 5f       	subi	r25, 0xFF	; 255
 674:	5f 4f       	sbci	r21, 0xFF	; 255
 676:	22 0f       	add	r18, r18
 678:	33 1f       	adc	r19, r19
 67a:	44 1f       	adc	r20, r20
 67c:	aa 1f       	adc	r26, r26
 67e:	a9 f3       	breq	.-22     	; 0x66a <__divsf3_pse+0x10>
 680:	33 d0       	rcall	.+102    	; 0x6e8 <__divsf3_pse+0x8e>
 682:	0e 2e       	mov	r0, r30
 684:	3a f0       	brmi	.+14     	; 0x694 <__divsf3_pse+0x3a>
 686:	e0 e8       	ldi	r30, 0x80	; 128
 688:	30 d0       	rcall	.+96     	; 0x6ea <__divsf3_pse+0x90>
 68a:	91 50       	subi	r25, 0x01	; 1
 68c:	50 40       	sbci	r21, 0x00	; 0
 68e:	e6 95       	lsr	r30
 690:	00 1c       	adc	r0, r0
 692:	ca f7       	brpl	.-14     	; 0x686 <__divsf3_pse+0x2c>
 694:	29 d0       	rcall	.+82     	; 0x6e8 <__divsf3_pse+0x8e>
 696:	fe 2f       	mov	r31, r30
 698:	27 d0       	rcall	.+78     	; 0x6e8 <__divsf3_pse+0x8e>
 69a:	66 0f       	add	r22, r22
 69c:	77 1f       	adc	r23, r23
 69e:	88 1f       	adc	r24, r24
 6a0:	bb 1f       	adc	r27, r27
 6a2:	26 17       	cp	r18, r22
 6a4:	37 07       	cpc	r19, r23
 6a6:	48 07       	cpc	r20, r24
 6a8:	ab 07       	cpc	r26, r27
 6aa:	b0 e8       	ldi	r27, 0x80	; 128
 6ac:	09 f0       	breq	.+2      	; 0x6b0 <__divsf3_pse+0x56>
 6ae:	bb 0b       	sbc	r27, r27
 6b0:	80 2d       	mov	r24, r0
 6b2:	bf 01       	movw	r22, r30
 6b4:	ff 27       	eor	r31, r31
 6b6:	93 58       	subi	r25, 0x83	; 131
 6b8:	5f 4f       	sbci	r21, 0xFF	; 255
 6ba:	2a f0       	brmi	.+10     	; 0x6c6 <__divsf3_pse+0x6c>
 6bc:	9e 3f       	cpi	r25, 0xFE	; 254
 6be:	51 05       	cpc	r21, r1
 6c0:	68 f0       	brcs	.+26     	; 0x6dc <__divsf3_pse+0x82>
 6c2:	b1 c0       	rjmp	.+354    	; 0x826 <__fp_inf>
 6c4:	fb c0       	rjmp	.+502    	; 0x8bc <__fp_szero>
 6c6:	5f 3f       	cpi	r21, 0xFF	; 255
 6c8:	ec f3       	brlt	.-6      	; 0x6c4 <__divsf3_pse+0x6a>
 6ca:	98 3e       	cpi	r25, 0xE8	; 232
 6cc:	dc f3       	brlt	.-10     	; 0x6c4 <__divsf3_pse+0x6a>
 6ce:	86 95       	lsr	r24
 6d0:	77 95       	ror	r23
 6d2:	67 95       	ror	r22
 6d4:	b7 95       	ror	r27
 6d6:	f7 95       	ror	r31
 6d8:	9f 5f       	subi	r25, 0xFF	; 255
 6da:	c9 f7       	brne	.-14     	; 0x6ce <__divsf3_pse+0x74>
 6dc:	88 0f       	add	r24, r24
 6de:	91 1d       	adc	r25, r1
 6e0:	96 95       	lsr	r25
 6e2:	87 95       	ror	r24
 6e4:	97 f9       	bld	r25, 7
 6e6:	08 95       	ret
 6e8:	e1 e0       	ldi	r30, 0x01	; 1
 6ea:	66 0f       	add	r22, r22
 6ec:	77 1f       	adc	r23, r23
 6ee:	88 1f       	adc	r24, r24
 6f0:	bb 1f       	adc	r27, r27
 6f2:	62 17       	cp	r22, r18
 6f4:	73 07       	cpc	r23, r19
 6f6:	84 07       	cpc	r24, r20
 6f8:	ba 07       	cpc	r27, r26
 6fa:	20 f0       	brcs	.+8      	; 0x704 <__divsf3_pse+0xaa>
 6fc:	62 1b       	sub	r22, r18
 6fe:	73 0b       	sbc	r23, r19
 700:	84 0b       	sbc	r24, r20
 702:	ba 0b       	sbc	r27, r26
 704:	ee 1f       	adc	r30, r30
 706:	88 f7       	brcc	.-30     	; 0x6ea <__divsf3_pse+0x90>
 708:	e0 95       	com	r30
 70a:	08 95       	ret

0000070c <__fixunssfsi>:
 70c:	bc d0       	rcall	.+376    	; 0x886 <__fp_splitA>
 70e:	88 f0       	brcs	.+34     	; 0x732 <__fixunssfsi+0x26>
 710:	9f 57       	subi	r25, 0x7F	; 127
 712:	90 f0       	brcs	.+36     	; 0x738 <__fixunssfsi+0x2c>
 714:	b9 2f       	mov	r27, r25
 716:	99 27       	eor	r25, r25
 718:	b7 51       	subi	r27, 0x17	; 23
 71a:	a0 f0       	brcs	.+40     	; 0x744 <__fixunssfsi+0x38>
 71c:	d1 f0       	breq	.+52     	; 0x752 <__fixunssfsi+0x46>
 71e:	66 0f       	add	r22, r22
 720:	77 1f       	adc	r23, r23
 722:	88 1f       	adc	r24, r24
 724:	99 1f       	adc	r25, r25
 726:	1a f0       	brmi	.+6      	; 0x72e <__fixunssfsi+0x22>
 728:	ba 95       	dec	r27
 72a:	c9 f7       	brne	.-14     	; 0x71e <__fixunssfsi+0x12>
 72c:	12 c0       	rjmp	.+36     	; 0x752 <__fixunssfsi+0x46>
 72e:	b1 30       	cpi	r27, 0x01	; 1
 730:	81 f0       	breq	.+32     	; 0x752 <__fixunssfsi+0x46>
 732:	c3 d0       	rcall	.+390    	; 0x8ba <__fp_zero>
 734:	b1 e0       	ldi	r27, 0x01	; 1
 736:	08 95       	ret
 738:	c0 c0       	rjmp	.+384    	; 0x8ba <__fp_zero>
 73a:	67 2f       	mov	r22, r23
 73c:	78 2f       	mov	r23, r24
 73e:	88 27       	eor	r24, r24
 740:	b8 5f       	subi	r27, 0xF8	; 248
 742:	39 f0       	breq	.+14     	; 0x752 <__fixunssfsi+0x46>
 744:	b9 3f       	cpi	r27, 0xF9	; 249
 746:	cc f3       	brlt	.-14     	; 0x73a <__fixunssfsi+0x2e>
 748:	86 95       	lsr	r24
 74a:	77 95       	ror	r23
 74c:	67 95       	ror	r22
 74e:	b3 95       	inc	r27
 750:	d9 f7       	brne	.-10     	; 0x748 <__fixunssfsi+0x3c>
 752:	3e f4       	brtc	.+14     	; 0x762 <__fixunssfsi+0x56>
 754:	90 95       	com	r25
 756:	80 95       	com	r24
 758:	70 95       	com	r23
 75a:	61 95       	neg	r22
 75c:	7f 4f       	sbci	r23, 0xFF	; 255
 75e:	8f 4f       	sbci	r24, 0xFF	; 255
 760:	9f 4f       	sbci	r25, 0xFF	; 255
 762:	08 95       	ret

00000764 <__floatunsisf>:
 764:	e8 94       	clt
 766:	09 c0       	rjmp	.+18     	; 0x77a <__floatsisf+0x12>

00000768 <__floatsisf>:
 768:	97 fb       	bst	r25, 7
 76a:	3e f4       	brtc	.+14     	; 0x77a <__floatsisf+0x12>
 76c:	90 95       	com	r25
 76e:	80 95       	com	r24
 770:	70 95       	com	r23
 772:	61 95       	neg	r22
 774:	7f 4f       	sbci	r23, 0xFF	; 255
 776:	8f 4f       	sbci	r24, 0xFF	; 255
 778:	9f 4f       	sbci	r25, 0xFF	; 255
 77a:	99 23       	and	r25, r25
 77c:	a9 f0       	breq	.+42     	; 0x7a8 <__floatsisf+0x40>
 77e:	f9 2f       	mov	r31, r25
 780:	96 e9       	ldi	r25, 0x96	; 150
 782:	bb 27       	eor	r27, r27
 784:	93 95       	inc	r25
 786:	f6 95       	lsr	r31
 788:	87 95       	ror	r24
 78a:	77 95       	ror	r23
 78c:	67 95       	ror	r22
 78e:	b7 95       	ror	r27
 790:	f1 11       	cpse	r31, r1
 792:	f8 cf       	rjmp	.-16     	; 0x784 <__floatsisf+0x1c>
 794:	fa f4       	brpl	.+62     	; 0x7d4 <__floatsisf+0x6c>
 796:	bb 0f       	add	r27, r27
 798:	11 f4       	brne	.+4      	; 0x79e <__floatsisf+0x36>
 79a:	60 ff       	sbrs	r22, 0
 79c:	1b c0       	rjmp	.+54     	; 0x7d4 <__floatsisf+0x6c>
 79e:	6f 5f       	subi	r22, 0xFF	; 255
 7a0:	7f 4f       	sbci	r23, 0xFF	; 255
 7a2:	8f 4f       	sbci	r24, 0xFF	; 255
 7a4:	9f 4f       	sbci	r25, 0xFF	; 255
 7a6:	16 c0       	rjmp	.+44     	; 0x7d4 <__floatsisf+0x6c>
 7a8:	88 23       	and	r24, r24
 7aa:	11 f0       	breq	.+4      	; 0x7b0 <__floatsisf+0x48>
 7ac:	96 e9       	ldi	r25, 0x96	; 150
 7ae:	11 c0       	rjmp	.+34     	; 0x7d2 <__floatsisf+0x6a>
 7b0:	77 23       	and	r23, r23
 7b2:	21 f0       	breq	.+8      	; 0x7bc <__floatsisf+0x54>
 7b4:	9e e8       	ldi	r25, 0x8E	; 142
 7b6:	87 2f       	mov	r24, r23
 7b8:	76 2f       	mov	r23, r22
 7ba:	05 c0       	rjmp	.+10     	; 0x7c6 <__floatsisf+0x5e>
 7bc:	66 23       	and	r22, r22
 7be:	71 f0       	breq	.+28     	; 0x7dc <__floatsisf+0x74>
 7c0:	96 e8       	ldi	r25, 0x86	; 134
 7c2:	86 2f       	mov	r24, r22
 7c4:	70 e0       	ldi	r23, 0x00	; 0
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	2a f0       	brmi	.+10     	; 0x7d4 <__floatsisf+0x6c>
 7ca:	9a 95       	dec	r25
 7cc:	66 0f       	add	r22, r22
 7ce:	77 1f       	adc	r23, r23
 7d0:	88 1f       	adc	r24, r24
 7d2:	da f7       	brpl	.-10     	; 0x7ca <__floatsisf+0x62>
 7d4:	88 0f       	add	r24, r24
 7d6:	96 95       	lsr	r25
 7d8:	87 95       	ror	r24
 7da:	97 f9       	bld	r25, 7
 7dc:	08 95       	ret

000007de <__fp_cmp>:
 7de:	99 0f       	add	r25, r25
 7e0:	00 08       	sbc	r0, r0
 7e2:	55 0f       	add	r21, r21
 7e4:	aa 0b       	sbc	r26, r26
 7e6:	e0 e8       	ldi	r30, 0x80	; 128
 7e8:	fe ef       	ldi	r31, 0xFE	; 254
 7ea:	16 16       	cp	r1, r22
 7ec:	17 06       	cpc	r1, r23
 7ee:	e8 07       	cpc	r30, r24
 7f0:	f9 07       	cpc	r31, r25
 7f2:	c0 f0       	brcs	.+48     	; 0x824 <__fp_cmp+0x46>
 7f4:	12 16       	cp	r1, r18
 7f6:	13 06       	cpc	r1, r19
 7f8:	e4 07       	cpc	r30, r20
 7fa:	f5 07       	cpc	r31, r21
 7fc:	98 f0       	brcs	.+38     	; 0x824 <__fp_cmp+0x46>
 7fe:	62 1b       	sub	r22, r18
 800:	73 0b       	sbc	r23, r19
 802:	84 0b       	sbc	r24, r20
 804:	95 0b       	sbc	r25, r21
 806:	39 f4       	brne	.+14     	; 0x816 <__fp_cmp+0x38>
 808:	0a 26       	eor	r0, r26
 80a:	61 f0       	breq	.+24     	; 0x824 <__fp_cmp+0x46>
 80c:	23 2b       	or	r18, r19
 80e:	24 2b       	or	r18, r20
 810:	25 2b       	or	r18, r21
 812:	21 f4       	brne	.+8      	; 0x81c <__fp_cmp+0x3e>
 814:	08 95       	ret
 816:	0a 26       	eor	r0, r26
 818:	09 f4       	brne	.+2      	; 0x81c <__fp_cmp+0x3e>
 81a:	a1 40       	sbci	r26, 0x01	; 1
 81c:	a6 95       	lsr	r26
 81e:	8f ef       	ldi	r24, 0xFF	; 255
 820:	81 1d       	adc	r24, r1
 822:	81 1d       	adc	r24, r1
 824:	08 95       	ret

00000826 <__fp_inf>:
 826:	97 f9       	bld	r25, 7
 828:	9f 67       	ori	r25, 0x7F	; 127
 82a:	80 e8       	ldi	r24, 0x80	; 128
 82c:	70 e0       	ldi	r23, 0x00	; 0
 82e:	60 e0       	ldi	r22, 0x00	; 0
 830:	08 95       	ret

00000832 <__fp_nan>:
 832:	9f ef       	ldi	r25, 0xFF	; 255
 834:	80 ec       	ldi	r24, 0xC0	; 192
 836:	08 95       	ret

00000838 <__fp_pscA>:
 838:	00 24       	eor	r0, r0
 83a:	0a 94       	dec	r0
 83c:	16 16       	cp	r1, r22
 83e:	17 06       	cpc	r1, r23
 840:	18 06       	cpc	r1, r24
 842:	09 06       	cpc	r0, r25
 844:	08 95       	ret

00000846 <__fp_pscB>:
 846:	00 24       	eor	r0, r0
 848:	0a 94       	dec	r0
 84a:	12 16       	cp	r1, r18
 84c:	13 06       	cpc	r1, r19
 84e:	14 06       	cpc	r1, r20
 850:	05 06       	cpc	r0, r21
 852:	08 95       	ret

00000854 <__fp_round>:
 854:	09 2e       	mov	r0, r25
 856:	03 94       	inc	r0
 858:	00 0c       	add	r0, r0
 85a:	11 f4       	brne	.+4      	; 0x860 <__fp_round+0xc>
 85c:	88 23       	and	r24, r24
 85e:	52 f0       	brmi	.+20     	; 0x874 <__fp_round+0x20>
 860:	bb 0f       	add	r27, r27
 862:	40 f4       	brcc	.+16     	; 0x874 <__fp_round+0x20>
 864:	bf 2b       	or	r27, r31
 866:	11 f4       	brne	.+4      	; 0x86c <__fp_round+0x18>
 868:	60 ff       	sbrs	r22, 0
 86a:	04 c0       	rjmp	.+8      	; 0x874 <__fp_round+0x20>
 86c:	6f 5f       	subi	r22, 0xFF	; 255
 86e:	7f 4f       	sbci	r23, 0xFF	; 255
 870:	8f 4f       	sbci	r24, 0xFF	; 255
 872:	9f 4f       	sbci	r25, 0xFF	; 255
 874:	08 95       	ret

00000876 <__fp_split3>:
 876:	57 fd       	sbrc	r21, 7
 878:	90 58       	subi	r25, 0x80	; 128
 87a:	44 0f       	add	r20, r20
 87c:	55 1f       	adc	r21, r21
 87e:	59 f0       	breq	.+22     	; 0x896 <__fp_splitA+0x10>
 880:	5f 3f       	cpi	r21, 0xFF	; 255
 882:	71 f0       	breq	.+28     	; 0x8a0 <__fp_splitA+0x1a>
 884:	47 95       	ror	r20

00000886 <__fp_splitA>:
 886:	88 0f       	add	r24, r24
 888:	97 fb       	bst	r25, 7
 88a:	99 1f       	adc	r25, r25
 88c:	61 f0       	breq	.+24     	; 0x8a6 <__fp_splitA+0x20>
 88e:	9f 3f       	cpi	r25, 0xFF	; 255
 890:	79 f0       	breq	.+30     	; 0x8b0 <__fp_splitA+0x2a>
 892:	87 95       	ror	r24
 894:	08 95       	ret
 896:	12 16       	cp	r1, r18
 898:	13 06       	cpc	r1, r19
 89a:	14 06       	cpc	r1, r20
 89c:	55 1f       	adc	r21, r21
 89e:	f2 cf       	rjmp	.-28     	; 0x884 <__fp_split3+0xe>
 8a0:	46 95       	lsr	r20
 8a2:	f1 df       	rcall	.-30     	; 0x886 <__fp_splitA>
 8a4:	08 c0       	rjmp	.+16     	; 0x8b6 <__fp_splitA+0x30>
 8a6:	16 16       	cp	r1, r22
 8a8:	17 06       	cpc	r1, r23
 8aa:	18 06       	cpc	r1, r24
 8ac:	99 1f       	adc	r25, r25
 8ae:	f1 cf       	rjmp	.-30     	; 0x892 <__fp_splitA+0xc>
 8b0:	86 95       	lsr	r24
 8b2:	71 05       	cpc	r23, r1
 8b4:	61 05       	cpc	r22, r1
 8b6:	08 94       	sec
 8b8:	08 95       	ret

000008ba <__fp_zero>:
 8ba:	e8 94       	clt

000008bc <__fp_szero>:
 8bc:	bb 27       	eor	r27, r27
 8be:	66 27       	eor	r22, r22
 8c0:	77 27       	eor	r23, r23
 8c2:	cb 01       	movw	r24, r22
 8c4:	97 f9       	bld	r25, 7
 8c6:	08 95       	ret

000008c8 <__gesf2>:
 8c8:	8a df       	rcall	.-236    	; 0x7de <__fp_cmp>
 8ca:	08 f4       	brcc	.+2      	; 0x8ce <__gesf2+0x6>
 8cc:	8f ef       	ldi	r24, 0xFF	; 255
 8ce:	08 95       	ret

000008d0 <__mulsf3>:
 8d0:	0b d0       	rcall	.+22     	; 0x8e8 <__mulsf3x>
 8d2:	c0 cf       	rjmp	.-128    	; 0x854 <__fp_round>
 8d4:	b1 df       	rcall	.-158    	; 0x838 <__fp_pscA>
 8d6:	28 f0       	brcs	.+10     	; 0x8e2 <__mulsf3+0x12>
 8d8:	b6 df       	rcall	.-148    	; 0x846 <__fp_pscB>
 8da:	18 f0       	brcs	.+6      	; 0x8e2 <__mulsf3+0x12>
 8dc:	95 23       	and	r25, r21
 8de:	09 f0       	breq	.+2      	; 0x8e2 <__mulsf3+0x12>
 8e0:	a2 cf       	rjmp	.-188    	; 0x826 <__fp_inf>
 8e2:	a7 cf       	rjmp	.-178    	; 0x832 <__fp_nan>
 8e4:	11 24       	eor	r1, r1
 8e6:	ea cf       	rjmp	.-44     	; 0x8bc <__fp_szero>

000008e8 <__mulsf3x>:
 8e8:	c6 df       	rcall	.-116    	; 0x876 <__fp_split3>
 8ea:	a0 f3       	brcs	.-24     	; 0x8d4 <__mulsf3+0x4>

000008ec <__mulsf3_pse>:
 8ec:	95 9f       	mul	r25, r21
 8ee:	d1 f3       	breq	.-12     	; 0x8e4 <__mulsf3+0x14>
 8f0:	95 0f       	add	r25, r21
 8f2:	50 e0       	ldi	r21, 0x00	; 0
 8f4:	55 1f       	adc	r21, r21
 8f6:	62 9f       	mul	r22, r18
 8f8:	f0 01       	movw	r30, r0
 8fa:	72 9f       	mul	r23, r18
 8fc:	bb 27       	eor	r27, r27
 8fe:	f0 0d       	add	r31, r0
 900:	b1 1d       	adc	r27, r1
 902:	63 9f       	mul	r22, r19
 904:	aa 27       	eor	r26, r26
 906:	f0 0d       	add	r31, r0
 908:	b1 1d       	adc	r27, r1
 90a:	aa 1f       	adc	r26, r26
 90c:	64 9f       	mul	r22, r20
 90e:	66 27       	eor	r22, r22
 910:	b0 0d       	add	r27, r0
 912:	a1 1d       	adc	r26, r1
 914:	66 1f       	adc	r22, r22
 916:	82 9f       	mul	r24, r18
 918:	22 27       	eor	r18, r18
 91a:	b0 0d       	add	r27, r0
 91c:	a1 1d       	adc	r26, r1
 91e:	62 1f       	adc	r22, r18
 920:	73 9f       	mul	r23, r19
 922:	b0 0d       	add	r27, r0
 924:	a1 1d       	adc	r26, r1
 926:	62 1f       	adc	r22, r18
 928:	83 9f       	mul	r24, r19
 92a:	a0 0d       	add	r26, r0
 92c:	61 1d       	adc	r22, r1
 92e:	22 1f       	adc	r18, r18
 930:	74 9f       	mul	r23, r20
 932:	33 27       	eor	r19, r19
 934:	a0 0d       	add	r26, r0
 936:	61 1d       	adc	r22, r1
 938:	23 1f       	adc	r18, r19
 93a:	84 9f       	mul	r24, r20
 93c:	60 0d       	add	r22, r0
 93e:	21 1d       	adc	r18, r1
 940:	82 2f       	mov	r24, r18
 942:	76 2f       	mov	r23, r22
 944:	6a 2f       	mov	r22, r26
 946:	11 24       	eor	r1, r1
 948:	9f 57       	subi	r25, 0x7F	; 127
 94a:	50 40       	sbci	r21, 0x00	; 0
 94c:	8a f0       	brmi	.+34     	; 0x970 <__mulsf3_pse+0x84>
 94e:	e1 f0       	breq	.+56     	; 0x988 <__mulsf3_pse+0x9c>
 950:	88 23       	and	r24, r24
 952:	4a f0       	brmi	.+18     	; 0x966 <__mulsf3_pse+0x7a>
 954:	ee 0f       	add	r30, r30
 956:	ff 1f       	adc	r31, r31
 958:	bb 1f       	adc	r27, r27
 95a:	66 1f       	adc	r22, r22
 95c:	77 1f       	adc	r23, r23
 95e:	88 1f       	adc	r24, r24
 960:	91 50       	subi	r25, 0x01	; 1
 962:	50 40       	sbci	r21, 0x00	; 0
 964:	a9 f7       	brne	.-22     	; 0x950 <__mulsf3_pse+0x64>
 966:	9e 3f       	cpi	r25, 0xFE	; 254
 968:	51 05       	cpc	r21, r1
 96a:	70 f0       	brcs	.+28     	; 0x988 <__mulsf3_pse+0x9c>
 96c:	5c cf       	rjmp	.-328    	; 0x826 <__fp_inf>
 96e:	a6 cf       	rjmp	.-180    	; 0x8bc <__fp_szero>
 970:	5f 3f       	cpi	r21, 0xFF	; 255
 972:	ec f3       	brlt	.-6      	; 0x96e <__mulsf3_pse+0x82>
 974:	98 3e       	cpi	r25, 0xE8	; 232
 976:	dc f3       	brlt	.-10     	; 0x96e <__mulsf3_pse+0x82>
 978:	86 95       	lsr	r24
 97a:	77 95       	ror	r23
 97c:	67 95       	ror	r22
 97e:	b7 95       	ror	r27
 980:	f7 95       	ror	r31
 982:	e7 95       	ror	r30
 984:	9f 5f       	subi	r25, 0xFF	; 255
 986:	c1 f7       	brne	.-16     	; 0x978 <__mulsf3_pse+0x8c>
 988:	fe 2b       	or	r31, r30
 98a:	88 0f       	add	r24, r24
 98c:	91 1d       	adc	r25, r1
 98e:	96 95       	lsr	r25
 990:	87 95       	ror	r24
 992:	97 f9       	bld	r25, 7
 994:	08 95       	ret

00000996 <pow>:
 996:	fa 01       	movw	r30, r20
 998:	ee 0f       	add	r30, r30
 99a:	ff 1f       	adc	r31, r31
 99c:	30 96       	adiw	r30, 0x00	; 0
 99e:	21 05       	cpc	r18, r1
 9a0:	31 05       	cpc	r19, r1
 9a2:	99 f1       	breq	.+102    	; 0xa0a <pow+0x74>
 9a4:	61 15       	cp	r22, r1
 9a6:	71 05       	cpc	r23, r1
 9a8:	61 f4       	brne	.+24     	; 0x9c2 <pow+0x2c>
 9aa:	80 38       	cpi	r24, 0x80	; 128
 9ac:	bf e3       	ldi	r27, 0x3F	; 63
 9ae:	9b 07       	cpc	r25, r27
 9b0:	49 f1       	breq	.+82     	; 0xa04 <pow+0x6e>
 9b2:	68 94       	set
 9b4:	90 38       	cpi	r25, 0x80	; 128
 9b6:	81 05       	cpc	r24, r1
 9b8:	61 f0       	breq	.+24     	; 0x9d2 <pow+0x3c>
 9ba:	80 38       	cpi	r24, 0x80	; 128
 9bc:	bf ef       	ldi	r27, 0xFF	; 255
 9be:	9b 07       	cpc	r25, r27
 9c0:	41 f0       	breq	.+16     	; 0x9d2 <pow+0x3c>
 9c2:	99 23       	and	r25, r25
 9c4:	42 f5       	brpl	.+80     	; 0xa16 <pow+0x80>
 9c6:	ff 3f       	cpi	r31, 0xFF	; 255
 9c8:	e1 05       	cpc	r30, r1
 9ca:	31 05       	cpc	r19, r1
 9cc:	21 05       	cpc	r18, r1
 9ce:	11 f1       	breq	.+68     	; 0xa14 <pow+0x7e>
 9d0:	e8 94       	clt
 9d2:	08 94       	sec
 9d4:	e7 95       	ror	r30
 9d6:	d9 01       	movw	r26, r18
 9d8:	aa 23       	and	r26, r26
 9da:	29 f4       	brne	.+10     	; 0x9e6 <pow+0x50>
 9dc:	ab 2f       	mov	r26, r27
 9de:	be 2f       	mov	r27, r30
 9e0:	f8 5f       	subi	r31, 0xF8	; 248
 9e2:	d0 f3       	brcs	.-12     	; 0x9d8 <pow+0x42>
 9e4:	10 c0       	rjmp	.+32     	; 0xa06 <pow+0x70>
 9e6:	ff 5f       	subi	r31, 0xFF	; 255
 9e8:	70 f4       	brcc	.+28     	; 0xa06 <pow+0x70>
 9ea:	a6 95       	lsr	r26
 9ec:	e0 f7       	brcc	.-8      	; 0x9e6 <pow+0x50>
 9ee:	f7 39       	cpi	r31, 0x97	; 151
 9f0:	50 f0       	brcs	.+20     	; 0xa06 <pow+0x70>
 9f2:	19 f0       	breq	.+6      	; 0x9fa <pow+0x64>
 9f4:	ff 3a       	cpi	r31, 0xAF	; 175
 9f6:	38 f4       	brcc	.+14     	; 0xa06 <pow+0x70>
 9f8:	9f 77       	andi	r25, 0x7F	; 127
 9fa:	9f 93       	push	r25
 9fc:	0c d0       	rcall	.+24     	; 0xa16 <pow+0x80>
 9fe:	0f 90       	pop	r0
 a00:	07 fc       	sbrc	r0, 7
 a02:	90 58       	subi	r25, 0x80	; 128
 a04:	08 95       	ret
 a06:	3e f0       	brts	.+14     	; 0xa16 <pow+0x80>
 a08:	14 cf       	rjmp	.-472    	; 0x832 <__fp_nan>
 a0a:	60 e0       	ldi	r22, 0x00	; 0
 a0c:	70 e0       	ldi	r23, 0x00	; 0
 a0e:	80 e8       	ldi	r24, 0x80	; 128
 a10:	9f e3       	ldi	r25, 0x3F	; 63
 a12:	08 95       	ret
 a14:	4f e7       	ldi	r20, 0x7F	; 127
 a16:	9f 77       	andi	r25, 0x7F	; 127
 a18:	5f 93       	push	r21
 a1a:	4f 93       	push	r20
 a1c:	3f 93       	push	r19
 a1e:	2f 93       	push	r18
 a20:	9e d0       	rcall	.+316    	; 0xb5e <log>
 a22:	2f 91       	pop	r18
 a24:	3f 91       	pop	r19
 a26:	4f 91       	pop	r20
 a28:	5f 91       	pop	r21
 a2a:	52 df       	rcall	.-348    	; 0x8d0 <__mulsf3>
 a2c:	05 c0       	rjmp	.+10     	; 0xa38 <exp>
 a2e:	19 f4       	brne	.+6      	; 0xa36 <pow+0xa0>
 a30:	0e f0       	brts	.+2      	; 0xa34 <pow+0x9e>
 a32:	f9 ce       	rjmp	.-526    	; 0x826 <__fp_inf>
 a34:	42 cf       	rjmp	.-380    	; 0x8ba <__fp_zero>
 a36:	fd ce       	rjmp	.-518    	; 0x832 <__fp_nan>

00000a38 <exp>:
 a38:	26 df       	rcall	.-436    	; 0x886 <__fp_splitA>
 a3a:	c8 f3       	brcs	.-14     	; 0xa2e <pow+0x98>
 a3c:	96 38       	cpi	r25, 0x86	; 134
 a3e:	c0 f7       	brcc	.-16     	; 0xa30 <pow+0x9a>
 a40:	07 f8       	bld	r0, 7
 a42:	0f 92       	push	r0
 a44:	e8 94       	clt
 a46:	2b e3       	ldi	r18, 0x3B	; 59
 a48:	3a ea       	ldi	r19, 0xAA	; 170
 a4a:	48 eb       	ldi	r20, 0xB8	; 184
 a4c:	5f e7       	ldi	r21, 0x7F	; 127
 a4e:	4e df       	rcall	.-356    	; 0x8ec <__mulsf3_pse>
 a50:	0f 92       	push	r0
 a52:	0f 92       	push	r0
 a54:	0f 92       	push	r0
 a56:	4d b7       	in	r20, 0x3d	; 61
 a58:	5e b7       	in	r21, 0x3e	; 62
 a5a:	0f 92       	push	r0
 a5c:	c0 d0       	rcall	.+384    	; 0xbde <modf>
 a5e:	e8 ef       	ldi	r30, 0xF8	; 248
 a60:	f0 e0       	ldi	r31, 0x00	; 0
 a62:	16 d0       	rcall	.+44     	; 0xa90 <__fp_powser>
 a64:	4f 91       	pop	r20
 a66:	5f 91       	pop	r21
 a68:	ef 91       	pop	r30
 a6a:	ff 91       	pop	r31
 a6c:	e5 95       	asr	r30
 a6e:	ee 1f       	adc	r30, r30
 a70:	ff 1f       	adc	r31, r31
 a72:	49 f0       	breq	.+18     	; 0xa86 <exp+0x4e>
 a74:	fe 57       	subi	r31, 0x7E	; 126
 a76:	e0 68       	ori	r30, 0x80	; 128
 a78:	44 27       	eor	r20, r20
 a7a:	ee 0f       	add	r30, r30
 a7c:	44 1f       	adc	r20, r20
 a7e:	fa 95       	dec	r31
 a80:	e1 f7       	brne	.-8      	; 0xa7a <exp+0x42>
 a82:	41 95       	neg	r20
 a84:	55 0b       	sbc	r21, r21
 a86:	32 d0       	rcall	.+100    	; 0xaec <ldexp>
 a88:	0f 90       	pop	r0
 a8a:	07 fe       	sbrs	r0, 7
 a8c:	26 c0       	rjmp	.+76     	; 0xada <inverse>
 a8e:	08 95       	ret

00000a90 <__fp_powser>:
 a90:	df 93       	push	r29
 a92:	cf 93       	push	r28
 a94:	1f 93       	push	r17
 a96:	0f 93       	push	r16
 a98:	ff 92       	push	r15
 a9a:	ef 92       	push	r14
 a9c:	df 92       	push	r13
 a9e:	7b 01       	movw	r14, r22
 aa0:	8c 01       	movw	r16, r24
 aa2:	68 94       	set
 aa4:	05 c0       	rjmp	.+10     	; 0xab0 <__fp_powser+0x20>
 aa6:	da 2e       	mov	r13, r26
 aa8:	ef 01       	movw	r28, r30
 aaa:	1e df       	rcall	.-452    	; 0x8e8 <__mulsf3x>
 aac:	fe 01       	movw	r30, r28
 aae:	e8 94       	clt
 ab0:	a5 91       	lpm	r26, Z+
 ab2:	25 91       	lpm	r18, Z+
 ab4:	35 91       	lpm	r19, Z+
 ab6:	45 91       	lpm	r20, Z+
 ab8:	55 91       	lpm	r21, Z+
 aba:	ae f3       	brts	.-22     	; 0xaa6 <__fp_powser+0x16>
 abc:	ef 01       	movw	r28, r30
 abe:	d4 d0       	rcall	.+424    	; 0xc68 <__addsf3x>
 ac0:	fe 01       	movw	r30, r28
 ac2:	97 01       	movw	r18, r14
 ac4:	a8 01       	movw	r20, r16
 ac6:	da 94       	dec	r13
 ac8:	79 f7       	brne	.-34     	; 0xaa8 <__fp_powser+0x18>
 aca:	df 90       	pop	r13
 acc:	ef 90       	pop	r14
 ace:	ff 90       	pop	r15
 ad0:	0f 91       	pop	r16
 ad2:	1f 91       	pop	r17
 ad4:	cf 91       	pop	r28
 ad6:	df 91       	pop	r29
 ad8:	08 95       	ret

00000ada <inverse>:
 ada:	9b 01       	movw	r18, r22
 adc:	ac 01       	movw	r20, r24
 ade:	60 e0       	ldi	r22, 0x00	; 0
 ae0:	70 e0       	ldi	r23, 0x00	; 0
 ae2:	80 e8       	ldi	r24, 0x80	; 128
 ae4:	9f e3       	ldi	r25, 0x3F	; 63
 ae6:	aa cd       	rjmp	.-1196   	; 0x63c <__divsf3>
 ae8:	9e ce       	rjmp	.-708    	; 0x826 <__fp_inf>
 aea:	11 c1       	rjmp	.+546    	; 0xd0e <__fp_mpack>

00000aec <ldexp>:
 aec:	cc de       	rcall	.-616    	; 0x886 <__fp_splitA>
 aee:	e8 f3       	brcs	.-6      	; 0xaea <inverse+0x10>
 af0:	99 23       	and	r25, r25
 af2:	d9 f3       	breq	.-10     	; 0xaea <inverse+0x10>
 af4:	94 0f       	add	r25, r20
 af6:	51 1d       	adc	r21, r1
 af8:	bb f3       	brvs	.-18     	; 0xae8 <inverse+0xe>
 afa:	91 50       	subi	r25, 0x01	; 1
 afc:	50 40       	sbci	r21, 0x00	; 0
 afe:	94 f0       	brlt	.+36     	; 0xb24 <ldexp+0x38>
 b00:	59 f0       	breq	.+22     	; 0xb18 <ldexp+0x2c>
 b02:	88 23       	and	r24, r24
 b04:	32 f0       	brmi	.+12     	; 0xb12 <ldexp+0x26>
 b06:	66 0f       	add	r22, r22
 b08:	77 1f       	adc	r23, r23
 b0a:	88 1f       	adc	r24, r24
 b0c:	91 50       	subi	r25, 0x01	; 1
 b0e:	50 40       	sbci	r21, 0x00	; 0
 b10:	c1 f7       	brne	.-16     	; 0xb02 <ldexp+0x16>
 b12:	9e 3f       	cpi	r25, 0xFE	; 254
 b14:	51 05       	cpc	r21, r1
 b16:	44 f7       	brge	.-48     	; 0xae8 <inverse+0xe>
 b18:	88 0f       	add	r24, r24
 b1a:	91 1d       	adc	r25, r1
 b1c:	96 95       	lsr	r25
 b1e:	87 95       	ror	r24
 b20:	97 f9       	bld	r25, 7
 b22:	08 95       	ret
 b24:	5f 3f       	cpi	r21, 0xFF	; 255
 b26:	ac f0       	brlt	.+42     	; 0xb52 <ldexp+0x66>
 b28:	98 3e       	cpi	r25, 0xE8	; 232
 b2a:	9c f0       	brlt	.+38     	; 0xb52 <ldexp+0x66>
 b2c:	bb 27       	eor	r27, r27
 b2e:	86 95       	lsr	r24
 b30:	77 95       	ror	r23
 b32:	67 95       	ror	r22
 b34:	b7 95       	ror	r27
 b36:	08 f4       	brcc	.+2      	; 0xb3a <ldexp+0x4e>
 b38:	b1 60       	ori	r27, 0x01	; 1
 b3a:	93 95       	inc	r25
 b3c:	c1 f7       	brne	.-16     	; 0xb2e <ldexp+0x42>
 b3e:	bb 0f       	add	r27, r27
 b40:	58 f7       	brcc	.-42     	; 0xb18 <ldexp+0x2c>
 b42:	11 f4       	brne	.+4      	; 0xb48 <ldexp+0x5c>
 b44:	60 ff       	sbrs	r22, 0
 b46:	e8 cf       	rjmp	.-48     	; 0xb18 <ldexp+0x2c>
 b48:	6f 5f       	subi	r22, 0xFF	; 255
 b4a:	7f 4f       	sbci	r23, 0xFF	; 255
 b4c:	8f 4f       	sbci	r24, 0xFF	; 255
 b4e:	9f 4f       	sbci	r25, 0xFF	; 255
 b50:	e3 cf       	rjmp	.-58     	; 0xb18 <ldexp+0x2c>
 b52:	b4 ce       	rjmp	.-664    	; 0x8bc <__fp_szero>
 b54:	0e f0       	brts	.+2      	; 0xb58 <ldexp+0x6c>
 b56:	db c0       	rjmp	.+438    	; 0xd0e <__fp_mpack>
 b58:	6c ce       	rjmp	.-808    	; 0x832 <__fp_nan>
 b5a:	68 94       	set
 b5c:	64 ce       	rjmp	.-824    	; 0x826 <__fp_inf>

00000b5e <log>:
 b5e:	93 de       	rcall	.-730    	; 0x886 <__fp_splitA>
 b60:	c8 f3       	brcs	.-14     	; 0xb54 <ldexp+0x68>
 b62:	99 23       	and	r25, r25
 b64:	d1 f3       	breq	.-12     	; 0xb5a <ldexp+0x6e>
 b66:	c6 f3       	brts	.-16     	; 0xb58 <ldexp+0x6c>
 b68:	df 93       	push	r29
 b6a:	cf 93       	push	r28
 b6c:	1f 93       	push	r17
 b6e:	0f 93       	push	r16
 b70:	ff 92       	push	r15
 b72:	c9 2f       	mov	r28, r25
 b74:	dd 27       	eor	r29, r29
 b76:	88 23       	and	r24, r24
 b78:	2a f0       	brmi	.+10     	; 0xb84 <log+0x26>
 b7a:	21 97       	sbiw	r28, 0x01	; 1
 b7c:	66 0f       	add	r22, r22
 b7e:	77 1f       	adc	r23, r23
 b80:	88 1f       	adc	r24, r24
 b82:	da f7       	brpl	.-10     	; 0xb7a <log+0x1c>
 b84:	20 e0       	ldi	r18, 0x00	; 0
 b86:	30 e0       	ldi	r19, 0x00	; 0
 b88:	40 e8       	ldi	r20, 0x80	; 128
 b8a:	5f eb       	ldi	r21, 0xBF	; 191
 b8c:	9f e3       	ldi	r25, 0x3F	; 63
 b8e:	88 39       	cpi	r24, 0x98	; 152
 b90:	20 f0       	brcs	.+8      	; 0xb9a <log+0x3c>
 b92:	80 3e       	cpi	r24, 0xE0	; 224
 b94:	30 f0       	brcs	.+12     	; 0xba2 <log+0x44>
 b96:	21 96       	adiw	r28, 0x01	; 1
 b98:	8f 77       	andi	r24, 0x7F	; 127
 b9a:	55 d0       	rcall	.+170    	; 0xc46 <__addsf3>
 b9c:	e0 e2       	ldi	r30, 0x20	; 32
 b9e:	f1 e0       	ldi	r31, 0x01	; 1
 ba0:	03 c0       	rjmp	.+6      	; 0xba8 <log+0x4a>
 ba2:	51 d0       	rcall	.+162    	; 0xc46 <__addsf3>
 ba4:	ed e4       	ldi	r30, 0x4D	; 77
 ba6:	f1 e0       	ldi	r31, 0x01	; 1
 ba8:	73 df       	rcall	.-282    	; 0xa90 <__fp_powser>
 baa:	8b 01       	movw	r16, r22
 bac:	be 01       	movw	r22, r28
 bae:	ec 01       	movw	r28, r24
 bb0:	fb 2e       	mov	r15, r27
 bb2:	6f 57       	subi	r22, 0x7F	; 127
 bb4:	71 09       	sbc	r23, r1
 bb6:	75 95       	asr	r23
 bb8:	77 1f       	adc	r23, r23
 bba:	88 0b       	sbc	r24, r24
 bbc:	99 0b       	sbc	r25, r25
 bbe:	d4 dd       	rcall	.-1112   	; 0x768 <__floatsisf>
 bc0:	28 e1       	ldi	r18, 0x18	; 24
 bc2:	32 e7       	ldi	r19, 0x72	; 114
 bc4:	41 e3       	ldi	r20, 0x31	; 49
 bc6:	5f e3       	ldi	r21, 0x3F	; 63
 bc8:	8f de       	rcall	.-738    	; 0x8e8 <__mulsf3x>
 bca:	af 2d       	mov	r26, r15
 bcc:	98 01       	movw	r18, r16
 bce:	ae 01       	movw	r20, r28
 bd0:	ff 90       	pop	r15
 bd2:	0f 91       	pop	r16
 bd4:	1f 91       	pop	r17
 bd6:	cf 91       	pop	r28
 bd8:	df 91       	pop	r29
 bda:	46 d0       	rcall	.+140    	; 0xc68 <__addsf3x>
 bdc:	3b ce       	rjmp	.-906    	; 0x854 <__fp_round>

00000bde <modf>:
 bde:	fa 01       	movw	r30, r20
 be0:	dc 01       	movw	r26, r24
 be2:	aa 0f       	add	r26, r26
 be4:	bb 1f       	adc	r27, r27
 be6:	9b 01       	movw	r18, r22
 be8:	ac 01       	movw	r20, r24
 bea:	bf 57       	subi	r27, 0x7F	; 127
 bec:	28 f4       	brcc	.+10     	; 0xbf8 <modf+0x1a>
 bee:	22 27       	eor	r18, r18
 bf0:	33 27       	eor	r19, r19
 bf2:	44 27       	eor	r20, r20
 bf4:	50 78       	andi	r21, 0x80	; 128
 bf6:	1f c0       	rjmp	.+62     	; 0xc36 <modf+0x58>
 bf8:	b7 51       	subi	r27, 0x17	; 23
 bfa:	88 f4       	brcc	.+34     	; 0xc1e <modf+0x40>
 bfc:	ab 2f       	mov	r26, r27
 bfe:	00 24       	eor	r0, r0
 c00:	46 95       	lsr	r20
 c02:	37 95       	ror	r19
 c04:	27 95       	ror	r18
 c06:	01 1c       	adc	r0, r1
 c08:	a3 95       	inc	r26
 c0a:	d2 f3       	brmi	.-12     	; 0xc00 <modf+0x22>
 c0c:	00 20       	and	r0, r0
 c0e:	69 f0       	breq	.+26     	; 0xc2a <modf+0x4c>
 c10:	22 0f       	add	r18, r18
 c12:	33 1f       	adc	r19, r19
 c14:	44 1f       	adc	r20, r20
 c16:	b3 95       	inc	r27
 c18:	da f3       	brmi	.-10     	; 0xc10 <modf+0x32>
 c1a:	0d d0       	rcall	.+26     	; 0xc36 <modf+0x58>
 c1c:	13 c0       	rjmp	.+38     	; 0xc44 <__subsf3>
 c1e:	61 30       	cpi	r22, 0x01	; 1
 c20:	71 05       	cpc	r23, r1
 c22:	a0 e8       	ldi	r26, 0x80	; 128
 c24:	8a 07       	cpc	r24, r26
 c26:	b9 46       	sbci	r27, 0x69	; 105
 c28:	30 f4       	brcc	.+12     	; 0xc36 <modf+0x58>
 c2a:	9b 01       	movw	r18, r22
 c2c:	ac 01       	movw	r20, r24
 c2e:	66 27       	eor	r22, r22
 c30:	77 27       	eor	r23, r23
 c32:	88 27       	eor	r24, r24
 c34:	90 78       	andi	r25, 0x80	; 128
 c36:	30 96       	adiw	r30, 0x00	; 0
 c38:	21 f0       	breq	.+8      	; 0xc42 <modf+0x64>
 c3a:	20 83       	st	Z, r18
 c3c:	31 83       	std	Z+1, r19	; 0x01
 c3e:	42 83       	std	Z+2, r20	; 0x02
 c40:	53 83       	std	Z+3, r21	; 0x03
 c42:	08 95       	ret

00000c44 <__subsf3>:
 c44:	50 58       	subi	r21, 0x80	; 128

00000c46 <__addsf3>:
 c46:	bb 27       	eor	r27, r27
 c48:	aa 27       	eor	r26, r26
 c4a:	0e d0       	rcall	.+28     	; 0xc68 <__addsf3x>
 c4c:	03 ce       	rjmp	.-1018   	; 0x854 <__fp_round>
 c4e:	f4 dd       	rcall	.-1048   	; 0x838 <__fp_pscA>
 c50:	30 f0       	brcs	.+12     	; 0xc5e <__addsf3+0x18>
 c52:	f9 dd       	rcall	.-1038   	; 0x846 <__fp_pscB>
 c54:	20 f0       	brcs	.+8      	; 0xc5e <__addsf3+0x18>
 c56:	31 f4       	brne	.+12     	; 0xc64 <__addsf3+0x1e>
 c58:	9f 3f       	cpi	r25, 0xFF	; 255
 c5a:	11 f4       	brne	.+4      	; 0xc60 <__addsf3+0x1a>
 c5c:	1e f4       	brtc	.+6      	; 0xc64 <__addsf3+0x1e>
 c5e:	e9 cd       	rjmp	.-1070   	; 0x832 <__fp_nan>
 c60:	0e f4       	brtc	.+2      	; 0xc64 <__addsf3+0x1e>
 c62:	e0 95       	com	r30
 c64:	e7 fb       	bst	r30, 7
 c66:	df cd       	rjmp	.-1090   	; 0x826 <__fp_inf>

00000c68 <__addsf3x>:
 c68:	e9 2f       	mov	r30, r25
 c6a:	05 de       	rcall	.-1014   	; 0x876 <__fp_split3>
 c6c:	80 f3       	brcs	.-32     	; 0xc4e <__addsf3+0x8>
 c6e:	ba 17       	cp	r27, r26
 c70:	62 07       	cpc	r22, r18
 c72:	73 07       	cpc	r23, r19
 c74:	84 07       	cpc	r24, r20
 c76:	95 07       	cpc	r25, r21
 c78:	18 f0       	brcs	.+6      	; 0xc80 <__addsf3x+0x18>
 c7a:	71 f4       	brne	.+28     	; 0xc98 <__addsf3x+0x30>
 c7c:	9e f5       	brtc	.+102    	; 0xce4 <__addsf3x+0x7c>
 c7e:	1d ce       	rjmp	.-966    	; 0x8ba <__fp_zero>
 c80:	0e f4       	brtc	.+2      	; 0xc84 <__addsf3x+0x1c>
 c82:	e0 95       	com	r30
 c84:	0b 2e       	mov	r0, r27
 c86:	ba 2f       	mov	r27, r26
 c88:	a0 2d       	mov	r26, r0
 c8a:	0b 01       	movw	r0, r22
 c8c:	b9 01       	movw	r22, r18
 c8e:	90 01       	movw	r18, r0
 c90:	0c 01       	movw	r0, r24
 c92:	ca 01       	movw	r24, r20
 c94:	a0 01       	movw	r20, r0
 c96:	11 24       	eor	r1, r1
 c98:	ff 27       	eor	r31, r31
 c9a:	59 1b       	sub	r21, r25
 c9c:	99 f0       	breq	.+38     	; 0xcc4 <__addsf3x+0x5c>
 c9e:	59 3f       	cpi	r21, 0xF9	; 249
 ca0:	50 f4       	brcc	.+20     	; 0xcb6 <__addsf3x+0x4e>
 ca2:	50 3e       	cpi	r21, 0xE0	; 224
 ca4:	68 f1       	brcs	.+90     	; 0xd00 <__addsf3x+0x98>
 ca6:	1a 16       	cp	r1, r26
 ca8:	f0 40       	sbci	r31, 0x00	; 0
 caa:	a2 2f       	mov	r26, r18
 cac:	23 2f       	mov	r18, r19
 cae:	34 2f       	mov	r19, r20
 cb0:	44 27       	eor	r20, r20
 cb2:	58 5f       	subi	r21, 0xF8	; 248
 cb4:	f3 cf       	rjmp	.-26     	; 0xc9c <__addsf3x+0x34>
 cb6:	46 95       	lsr	r20
 cb8:	37 95       	ror	r19
 cba:	27 95       	ror	r18
 cbc:	a7 95       	ror	r26
 cbe:	f0 40       	sbci	r31, 0x00	; 0
 cc0:	53 95       	inc	r21
 cc2:	c9 f7       	brne	.-14     	; 0xcb6 <__addsf3x+0x4e>
 cc4:	7e f4       	brtc	.+30     	; 0xce4 <__addsf3x+0x7c>
 cc6:	1f 16       	cp	r1, r31
 cc8:	ba 0b       	sbc	r27, r26
 cca:	62 0b       	sbc	r22, r18
 ccc:	73 0b       	sbc	r23, r19
 cce:	84 0b       	sbc	r24, r20
 cd0:	ba f0       	brmi	.+46     	; 0xd00 <__addsf3x+0x98>
 cd2:	91 50       	subi	r25, 0x01	; 1
 cd4:	a1 f0       	breq	.+40     	; 0xcfe <__addsf3x+0x96>
 cd6:	ff 0f       	add	r31, r31
 cd8:	bb 1f       	adc	r27, r27
 cda:	66 1f       	adc	r22, r22
 cdc:	77 1f       	adc	r23, r23
 cde:	88 1f       	adc	r24, r24
 ce0:	c2 f7       	brpl	.-16     	; 0xcd2 <__addsf3x+0x6a>
 ce2:	0e c0       	rjmp	.+28     	; 0xd00 <__addsf3x+0x98>
 ce4:	ba 0f       	add	r27, r26
 ce6:	62 1f       	adc	r22, r18
 ce8:	73 1f       	adc	r23, r19
 cea:	84 1f       	adc	r24, r20
 cec:	48 f4       	brcc	.+18     	; 0xd00 <__addsf3x+0x98>
 cee:	87 95       	ror	r24
 cf0:	77 95       	ror	r23
 cf2:	67 95       	ror	r22
 cf4:	b7 95       	ror	r27
 cf6:	f7 95       	ror	r31
 cf8:	9e 3f       	cpi	r25, 0xFE	; 254
 cfa:	08 f0       	brcs	.+2      	; 0xcfe <__addsf3x+0x96>
 cfc:	b3 cf       	rjmp	.-154    	; 0xc64 <__addsf3+0x1e>
 cfe:	93 95       	inc	r25
 d00:	88 0f       	add	r24, r24
 d02:	08 f0       	brcs	.+2      	; 0xd06 <__addsf3x+0x9e>
 d04:	99 27       	eor	r25, r25
 d06:	ee 0f       	add	r30, r30
 d08:	97 95       	ror	r25
 d0a:	87 95       	ror	r24
 d0c:	08 95       	ret

00000d0e <__fp_mpack>:
 d0e:	9f 3f       	cpi	r25, 0xFF	; 255
 d10:	31 f0       	breq	.+12     	; 0xd1e <__fp_mpack_finite+0xc>

00000d12 <__fp_mpack_finite>:
 d12:	91 50       	subi	r25, 0x01	; 1
 d14:	20 f4       	brcc	.+8      	; 0xd1e <__fp_mpack_finite+0xc>
 d16:	87 95       	ror	r24
 d18:	77 95       	ror	r23
 d1a:	67 95       	ror	r22
 d1c:	b7 95       	ror	r27
 d1e:	88 0f       	add	r24, r24
 d20:	91 1d       	adc	r25, r1
 d22:	96 95       	lsr	r25
 d24:	87 95       	ror	r24
 d26:	97 f9       	bld	r25, 7
 d28:	08 95       	ret

00000d2a <__tablejump2__>:
 d2a:	ee 0f       	add	r30, r30
 d2c:	ff 1f       	adc	r31, r31
 d2e:	88 1f       	adc	r24, r24
 d30:	8b bf       	out	0x3b, r24	; 59
 d32:	07 90       	elpm	r0, Z+
 d34:	f6 91       	elpm	r31, Z
 d36:	e0 2d       	mov	r30, r0
 d38:	19 94       	eijmp

00000d3a <_exit>:
 d3a:	f8 94       	cli

00000d3c <__stop_program>:
 d3c:	ff cf       	rjmp	.-2      	; 0xd3c <__stop_program>
